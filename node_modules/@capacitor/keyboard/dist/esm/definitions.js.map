{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC;AAkExC,MAAM,CAAN,IAAY,aAwBX;AAxBD,WAAY,aAAa;IACvB;;;;OAIG;IACH,8BAAa,CAAA;IAEb;;;;OAIG;IACH,gCAAe,CAAA;IAEf;;;;;;;OAOG;IACH,oCAAmB,CAAA;AACrB,CAAC,EAxBW,aAAa,KAAb,aAAa,QAwBxB;AAWD,MAAM,CAAN,IAAY,cA+BX;AA/BD,WAAY,cAAc;IACxB;;;;;OAKG;IACH,+BAAa,CAAA;IAEb;;;;;OAKG;IACH,iCAAe,CAAA;IAEf;;;;;OAKG;IACH,mCAAiB,CAAA;IAEjB;;;;OAIG;IACH,+BAAa,CAAA;AACf,CAAC,EA/BW,cAAc,KAAd,cAAc,QA+BzB","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\n\nimport type { PluginListenerHandle } from '@capacitor/core';\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    /**\n     * On iOS, the keyboard can be configured with the following options:\n     */\n    Keyboard?: {\n      /**\n       * Configure the way the app is resized when the Keyboard appears.\n       *\n       * Only available on iOS.\n       *\n       * @since 1.0.0\n       * @default native\n       * @example \"body\"\n       */\n      resize?: KeyboardResize;\n\n      /**\n       * Override the keyboard style if your app doesn't support dark/light theme changes.\n       * If not set, the keyboard style will depend on the device appearance.\n       *\n       * Only available on iOS.\n       *\n       * @since 1.0.0\n       * @example \"DARK\"\n       */\n      style?: KeyboardStyle;\n\n      /**\n       * There is an Android bug that prevents the keyboard from resizing the WebView\n       * when the app is in full screen (i.e. if StatusBar plugin is used to overlay the status bar).\n       * This setting, if set to true, add a workaround that resizes the WebView even when the app is in full screen.\n       *\n       * Only available for Android\n       *\n       * @since 1.1.0\n       * @example true\n       */\n      resizeOnFullScreen?: boolean;\n    };\n  }\n}\n\nexport interface KeyboardInfo {\n  /**\n   * Height of the heyboard.\n   *\n   * @since 1.0.0\n   */\n  keyboardHeight: number;\n}\n\nexport interface KeyboardStyleOptions {\n  /**\n   * Style of the keyboard.\n   *\n   * @since 1.0.0\n   * @default KeyboardStyle.Default\n   */\n  style: KeyboardStyle;\n}\n\nexport enum KeyboardStyle {\n  /**\n   * Dark keyboard.\n   *\n   * @since 1.0.0\n   */\n  Dark = 'DARK',\n\n  /**\n   * Light keyboard.\n   *\n   * @since 1.0.0\n   */\n  Light = 'LIGHT',\n\n  /**\n   * On iOS 13 and newer the keyboard style is based on the device appearance.\n   * If the device is using Dark mode, the keyboard will be dark.\n   * If the device is using Light mode, the keyboard will be light.\n   * On iOS 12 the keyboard will be light.\n   *\n   * @since 1.0.0\n   */\n  Default = 'DEFAULT',\n}\n\nexport interface KeyboardResizeOptions {\n  /**\n   * Mode used to resize elements when the keyboard appears.\n   *\n   * @since 1.0.0\n   */\n  mode: KeyboardResize;\n}\n\nexport enum KeyboardResize {\n  /**\n   * Only the `body` HTML element will be resized.\n   * Relative units are not affected, because the viewport does not change.\n   *\n   * @since 1.0.0\n   */\n  Body = 'body',\n\n  /**\n   * Only the `ion-app` HTML element will be resized.\n   * Use it only for Ionic Framework apps.\n   *\n   * @since 1.0.0\n   */\n  Ionic = 'ionic',\n\n  /**\n   * The whole native Web View will be resized when the keyboard shows/hides.\n   * This affects the `vh` relative unit.\n   *\n   * @since 1.0.0\n   */\n  Native = 'native',\n\n  /**\n   * Neither the app nor the Web View are resized.\n   *\n   * @since 1.0.0\n   */\n  None = 'none',\n}\n\nexport interface KeyboardPlugin {\n  /**\n   * Show the keyboard. This method is alpha and may have issues.\n   *\n   * This method is only supported on Android.\n   *\n   * @since 1.0.0\n   */\n  show(): Promise<void>;\n\n  /**\n   * Hide the keyboard.\n   *\n   * @since 1.0.0\n   */\n  hide(): Promise<void>;\n\n  /**\n   * Set whether the accessory bar should be visible on the keyboard. We recommend disabling\n   * the accessory bar for short forms (login, signup, etc.) to provide a cleaner UI.\n   *\n   * This method is only supported on iPhone devices.\n   *\n   * @since 1.0.0\n   */\n  setAccessoryBarVisible(options: { isVisible: boolean }): Promise<void>;\n\n  /**\n   * Programmatically enable or disable the WebView scroll.\n   *\n   * This method is only supported on iOS.\n   *\n   * @since 1.0.0\n   */\n  setScroll(options: { isDisabled: boolean }): Promise<void>;\n\n  /**\n   * Programmatically set the keyboard style.\n   *\n   * This method is only supported on iOS.\n   *\n   * @since 1.0.0\n   */\n  setStyle(options: KeyboardStyleOptions): Promise<void>;\n\n  /**\n   * Programmatically set the resize mode.\n   *\n   * This method is only supported on iOS.\n   *\n   * @since 1.0.0\n   */\n  setResizeMode(options: KeyboardResizeOptions): Promise<void>;\n\n  /**\n   * Get the currently set resize mode.\n   *\n   * This method is only supported on iOS.\n   *\n   * @since 4.0.0\n   */\n  getResizeMode(): Promise<KeyboardResizeOptions>;\n\n  /**\n   * Listen for when the keyboard is about to be shown.\n   *\n   * On Android keyboardWillShow and keyboardDidShow fire almost at the same time.\n   *\n   * @since 1.0.0\n   */\n  addListener(\n    eventName: 'keyboardWillShow',\n    listenerFunc: (info: KeyboardInfo) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Listen for when the keyboard is shown.\n   *\n   * On Android keyboardWillShow and keyboardDidShow fire almost at the same time.\n   *\n   * @since 1.0.0\n   */\n  addListener(\n    eventName: 'keyboardDidShow',\n    listenerFunc: (info: KeyboardInfo) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Listen for when the keyboard is about to be hidden.\n   *\n   * On Android keyboardWillHide and keyboardDidHide fire almost at the same time.\n   *\n   * @since 1.0.0\n   */\n  addListener(\n    eventName: 'keyboardWillHide',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Listen for when the keyboard is hidden.\n   *\n   * On Android keyboardWillHide and keyboardDidHide fire almost at the same time.\n   *\n   * @since 1.0.0\n   */\n  addListener(\n    eventName: 'keyboardDidHide',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Remove all native listeners for this plugin.\n   *\n   * @since 1.0.0\n   */\n  removeAllListeners(): Promise<void>;\n}\n"]}