{
  "version": 3,
  "sources": ["../../@capacitor/filesystem/src/web.ts"],
  "sourcesContent": ["import { WebPlugin, buildRequestInit } from '@capacitor/core';\n\nimport type {\n  AppendFileOptions,\n  CopyOptions,\n  CopyResult,\n  DeleteFileOptions,\n  FilesystemPlugin,\n  GetUriOptions,\n  GetUriResult,\n  MkdirOptions,\n  PermissionStatus,\n  ReadFileOptions,\n  ReadFileResult,\n  ReaddirOptions,\n  ReaddirResult,\n  RenameOptions,\n  RmdirOptions,\n  StatOptions,\n  StatResult,\n  WriteFileOptions,\n  WriteFileResult,\n  Directory,\n  DownloadFileOptions,\n  DownloadFileResult,\n  ProgressStatus,\n} from './definitions';\nimport { Encoding } from './definitions';\n\nfunction resolve(path: string): string {\n  const posix = path.split('/').filter(item => item !== '.');\n  const newPosix: string[] = [];\n\n  posix.forEach(item => {\n    if (\n      item === '..' &&\n      newPosix.length > 0 &&\n      newPosix[newPosix.length - 1] !== '..'\n    ) {\n      newPosix.pop();\n    } else {\n      newPosix.push(item);\n    }\n  });\n\n  return newPosix.join('/');\n}\nfunction isPathParent(parent: string, children: string): boolean {\n  parent = resolve(parent);\n  children = resolve(children);\n  const pathsA = parent.split('/');\n  const pathsB = children.split('/');\n\n  return (\n    parent !== children &&\n    pathsA.every((value, index) => value === pathsB[index])\n  );\n}\n\nexport class FilesystemWeb extends WebPlugin implements FilesystemPlugin {\n  DB_VERSION = 1;\n  DB_NAME = 'Disc';\n\n  private _writeCmds: string[] = ['add', 'put', 'delete'];\n  private _db?: IDBDatabase;\n  static _debug = true;\n  async initDb(): Promise<IDBDatabase> {\n    if (this._db !== undefined) {\n      return this._db;\n    }\n    if (!('indexedDB' in window)) {\n      throw this.unavailable(\"This browser doesn't support IndexedDB\");\n    }\n\n    return new Promise<IDBDatabase>((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n      request.onupgradeneeded = FilesystemWeb.doUpgrade;\n      request.onsuccess = () => {\n        this._db = request.result;\n        resolve(request.result);\n      };\n      request.onerror = () => reject(request.error);\n      request.onblocked = () => {\n        console.warn('db blocked');\n      };\n    });\n  }\n\n  static doUpgrade(event: IDBVersionChangeEvent): void {\n    const eventTarget = event.target as IDBOpenDBRequest;\n    const db = eventTarget.result;\n    switch (event.oldVersion) {\n      case 0:\n      case 1:\n      default: {\n        if (db.objectStoreNames.contains('FileStorage')) {\n          db.deleteObjectStore('FileStorage');\n        }\n        const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n        store.createIndex('by_folder', 'folder');\n      }\n    }\n  }\n\n  async dbRequest(cmd: string, args: any[]): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: any = tx.objectStore('FileStorage');\n        const req = store[cmd](...args);\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  async dbIndexRequest(\n    indexName: string,\n    cmd: string,\n    args: [any],\n  ): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: IDBObjectStore = tx.objectStore('FileStorage');\n        const index: any = store.index(indexName);\n        const req = index[cmd](...args) as any;\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  private getPath(\n    directory: Directory | undefined,\n    uriPath: string | undefined,\n  ): string {\n    const cleanedUriPath =\n      uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n    let fsPath = '';\n    if (directory !== undefined) fsPath += '/' + directory;\n    if (uriPath !== '') fsPath += '/' + cleanedUriPath;\n    return fsPath;\n  }\n\n  async clear(): Promise<void> {\n    const conn: IDBDatabase = await this.initDb();\n    const tx: IDBTransaction = conn.transaction(['FileStorage'], 'readwrite');\n    const store: IDBObjectStore = tx.objectStore('FileStorage');\n    store.clear();\n  }\n\n  /**\n   * Read a file from disk\n   * @param options options for the file read\n   * @return a promise that resolves with the read file data result\n   */\n  async readFile(options: ReadFileOptions): Promise<ReadFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    // const encoding = options.encoding;\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    return { data: entry.content ? entry.content : '' };\n  }\n\n  /**\n   * Write a file to disk in the specified location on device\n   * @param options options for the file write\n   * @return a promise that resolves with the file write result\n   */\n  async writeFile(options: WriteFileOptions): Promise<WriteFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const doRecursive = options.recursive;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: doRecursive,\n        });\n      }\n    }\n\n    if (!encoding && !(data instanceof Blob)) {\n      data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n      if (!this.isBase64String(data))\n        throw Error('The supplied data is not valid base64 content.');\n    }\n\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data instanceof Blob ? data.size : data.length,\n      ctime: now,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n    return {\n      uri: pathObj.path,\n    };\n  }\n\n  /**\n   * Append to a file on disk in the specified location on device\n   * @param options options for the file append\n   * @return a promise that resolves with the file write result\n   */\n  async appendFile(options: AppendFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const now = Date.now();\n    let ctime = now;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: true,\n        });\n      }\n    }\n\n    if (!encoding && !this.isBase64String(data))\n      throw Error('The supplied data is not valid base64 content.');\n\n    if (occupiedEntry !== undefined) {\n      if (occupiedEntry.content instanceof Blob) {\n        throw Error(\n          'The occupied entry contains a Blob object which cannot be appended to.',\n        );\n      }\n\n      if (occupiedEntry.content !== undefined && !encoding) {\n        data = btoa(atob(occupiedEntry.content) + atob(data));\n      } else {\n        data = occupiedEntry.content + data;\n      }\n      ctime = occupiedEntry.ctime;\n    }\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: ctime,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Delete a file from disk\n   * @param options options for the file delete\n   * @return a promise that resolves with the deleted file data result\n   */\n  async deleteFile(options: DeleteFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n      IDBKeyRange.only(path),\n    ]);\n    if (entries.length !== 0) throw Error('Folder is not empty.');\n\n    await this.dbRequest('delete', [path]);\n  }\n\n  /**\n   * Create a directory.\n   * @param options options for the mkdir\n   * @return a promise that resolves with the mkdir result\n   */\n  async mkdir(options: MkdirOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    const doRecursive = options.recursive;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const depth = (path.match(/\\//g) || []).length;\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (depth === 1) throw Error('Cannot create Root directory');\n    if (occupiedEntry !== undefined)\n      throw Error('Current directory does already exist.');\n    if (!doRecursive && depth !== 2 && parentEntry === undefined)\n      throw Error('Parent directory must exist');\n\n    if (doRecursive && depth !== 2 && parentEntry === undefined) {\n      const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n      await this.mkdir({\n        path: parentArgPath,\n        directory: options.directory,\n        recursive: doRecursive,\n      });\n    }\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'directory',\n      size: 0,\n      ctime: now,\n      mtime: now,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Remove a directory\n   * @param options the options for the directory remove\n   */\n  async rmdir(options: RmdirOptions): Promise<void> {\n    const { path, directory, recursive } = options;\n    const fullPath: string = this.getPath(directory, path);\n\n    const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n\n    if (entry === undefined) throw Error('Folder does not exist.');\n\n    if (entry.type !== 'directory')\n      throw Error('Requested path is not a directory');\n\n    const readDirResult = await this.readdir({ path, directory });\n\n    if (readDirResult.files.length !== 0 && !recursive)\n      throw Error('Folder is not empty');\n\n    for (const entry of readDirResult.files) {\n      const entryPath = `${path}/${entry.name}`;\n      const entryObj = await this.stat({ path: entryPath, directory });\n      if (entryObj.type === 'file') {\n        await this.deleteFile({ path: entryPath, directory });\n      } else {\n        await this.rmdir({ path: entryPath, directory, recursive });\n      }\n    }\n\n    await this.dbRequest('delete', [fullPath]);\n  }\n\n  /**\n   * Return a list of files from the directory (not recursive)\n   * @param options the options for the readdir operation\n   * @return a promise that resolves with the readdir directory listing result\n   */\n  async readdir(options: ReaddirOptions): Promise<ReaddirResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (options.path !== '' && entry === undefined)\n      throw Error('Folder does not exist.');\n\n    const entries: string[] = await this.dbIndexRequest(\n      'by_folder',\n      'getAllKeys',\n      [IDBKeyRange.only(path)],\n    );\n    const files = await Promise.all(\n      entries.map(async e => {\n        let subEntry = (await this.dbRequest('get', [e])) as EntryObj;\n        if (subEntry === undefined) {\n          subEntry = (await this.dbRequest('get', [e + '/'])) as EntryObj;\n        }\n        return {\n          name: e.substring(path.length + 1),\n          type: subEntry.type,\n          size: subEntry.size,\n          ctime: subEntry.ctime,\n          mtime: subEntry.mtime,\n          uri: subEntry.path,\n        };\n      }),\n    );\n    return { files: files };\n  }\n\n  /**\n   * Return full File URI for a path and directory\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async getUri(options: GetUriOptions): Promise<GetUriResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    return {\n      uri: entry?.path || path,\n    };\n  }\n\n  /**\n   * Return data about a file\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async stat(options: StatOptions): Promise<StatResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    if (entry === undefined) throw Error('Entry does not exist.');\n\n    return {\n      type: entry.type,\n      size: entry.size,\n      ctime: entry.ctime,\n      mtime: entry.mtime,\n      uri: entry.path,\n    };\n  }\n\n  /**\n   * Rename a file or directory\n   * @param options the options for the rename operation\n   * @return a promise that resolves with the rename result\n   */\n  async rename(options: RenameOptions): Promise<void> {\n    await this._copy(options, true);\n    return;\n  }\n\n  /**\n   * Copy a file or directory\n   * @param options the options for the copy operation\n   * @return a promise that resolves with the copy result\n   */\n  async copy(options: CopyOptions): Promise<CopyResult> {\n    return this._copy(options, false);\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  /**\n   * Function that can perform a copy or a rename\n   * @param options the options for the rename operation\n   * @param doRename whether to perform a rename or copy operation\n   * @return a promise that resolves with the result\n   */\n  private async _copy(\n    options: CopyOptions,\n    doRename = false,\n  ): Promise<CopyResult> {\n    let { toDirectory } = options;\n    const { to, from, directory: fromDirectory } = options;\n\n    if (!to || !from) {\n      throw Error('Both to and from must be provided');\n    }\n\n    // If no \"to\" directory is provided, use the \"from\" directory\n    if (!toDirectory) {\n      toDirectory = fromDirectory;\n    }\n\n    const fromPath = this.getPath(fromDirectory, from);\n    const toPath = this.getPath(toDirectory, to);\n\n    // Test that the \"to\" and \"from\" locations are different\n    if (fromPath === toPath) {\n      return {\n        uri: toPath,\n      };\n    }\n\n    if (isPathParent(fromPath, toPath)) {\n      throw Error('To path cannot contain the from path');\n    }\n\n    // Check the state of the \"to\" location\n    let toObj;\n    try {\n      toObj = await this.stat({\n        path: to,\n        directory: toDirectory,\n      });\n    } catch (e) {\n      // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n      const toPathComponents = to.split('/');\n      toPathComponents.pop();\n      const toPath = toPathComponents.join('/');\n\n      // Check the containing directory of the \"to\" location exists\n      if (toPathComponents.length > 0) {\n        const toParentDirectory = await this.stat({\n          path: toPath,\n          directory: toDirectory,\n        });\n\n        if (toParentDirectory.type !== 'directory') {\n          throw new Error('Parent directory of the to path is a file');\n        }\n      }\n    }\n\n    // Cannot overwrite a directory\n    if (toObj && toObj.type === 'directory') {\n      throw new Error('Cannot overwrite a directory with a file');\n    }\n\n    // Ensure the \"from\" object exists\n    const fromObj = await this.stat({\n      path: from,\n      directory: fromDirectory,\n    });\n\n    // Set the mtime/ctime of the supplied path\n    const updateTime = async (path: string, ctime: number, mtime: number) => {\n      const fullPath: string = this.getPath(toDirectory, path);\n      const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n      entry.ctime = ctime;\n      entry.mtime = mtime;\n      await this.dbRequest('put', [entry]);\n    };\n\n    const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n\n    switch (fromObj.type) {\n      // The \"from\" object is a file\n      case 'file': {\n        // Read the file\n        const file = await this.readFile({\n          path: from,\n          directory: fromDirectory,\n        });\n\n        // Optionally remove the file\n        if (doRename) {\n          await this.deleteFile({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n\n        let encoding;\n        if (!(file.data instanceof Blob) && !this.isBase64String(file.data)) {\n          encoding = Encoding.UTF8;\n        }\n\n        // Write the file to the new location\n        const writeResult = await this.writeFile({\n          path: to,\n          directory: toDirectory,\n          data: file.data,\n          encoding: encoding,\n        });\n\n        // Copy the mtime/ctime of a renamed file\n        if (doRename) {\n          await updateTime(to, ctime, fromObj.mtime);\n        }\n\n        // Resolve promise\n        return writeResult;\n      }\n      case 'directory': {\n        if (toObj) {\n          throw Error('Cannot move a directory over an existing object');\n        }\n\n        try {\n          // Create the to directory\n          await this.mkdir({\n            path: to,\n            directory: toDirectory,\n            recursive: false,\n          });\n\n          // Copy the mtime/ctime of a renamed directory\n          if (doRename) {\n            await updateTime(to, ctime, fromObj.mtime);\n          }\n        } catch (e) {\n          // ignore\n        }\n\n        // Iterate over the contents of the from location\n        const contents = (\n          await this.readdir({\n            path: from,\n            directory: fromDirectory,\n          })\n        ).files;\n\n        for (const filename of contents) {\n          // Move item from the from directory to the to directory\n          await this._copy(\n            {\n              from: `${from}/${filename.name}`,\n              to: `${to}/${filename.name}`,\n              directory: fromDirectory,\n              toDirectory,\n            },\n            doRename,\n          );\n        }\n\n        // Optionally remove the original from directory\n        if (doRename) {\n          await this.rmdir({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n      }\n    }\n    return {\n      uri: toPath,\n    };\n  }\n\n  /**\n   * Function that performs a http request to a server and downloads the file to the specified destination\n   *\n   * @param options the options for the download operation\n   * @returns a promise that resolves with the download file result\n   */\n  public downloadFile = async (\n    options: DownloadFileOptions,\n  ): Promise<DownloadFileResult> => {\n    const requestInit = buildRequestInit(options, options.webFetchExtra);\n    const response = await fetch(options.url, requestInit);\n    let blob: Blob;\n\n    if (!options.progress) blob = await response.blob();\n    else if (!response?.body) blob = new Blob();\n    else {\n      const reader = response.body.getReader();\n\n      let bytes = 0;\n      const chunks: (Uint8Array | undefined)[] = [];\n\n      const contentType: string | null = response.headers.get('content-type');\n      const contentLength: number = parseInt(\n        response.headers.get('content-length') || '0',\n        10,\n      );\n\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) break;\n\n        chunks.push(value);\n        bytes += value?.length || 0;\n\n        const status: ProgressStatus = {\n          url: options.url,\n          bytes,\n          contentLength,\n        };\n\n        this.notifyListeners('progress', status);\n      }\n\n      const allChunks = new Uint8Array(bytes);\n      let position = 0;\n      for (const chunk of chunks) {\n        if (typeof chunk === 'undefined') continue;\n\n        allChunks.set(chunk, position);\n        position += chunk.length;\n      }\n\n      blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n    }\n\n    const result = await this.writeFile({\n      path: options.path,\n      directory: options.directory ?? undefined,\n      recursive: options.recursive ?? false,\n      data: blob,\n    });\n\n    return { path: result.uri, blob };\n  };\n\n  private isBase64String(str: string): boolean {\n    try {\n      return btoa(atob(str)) == str;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\ninterface EntryObj {\n  path: string;\n  folder: string;\n  type: 'directory' | 'file';\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri?: string;\n  content?: string | Blob;\n}\n"],
  "mappings": "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",
  "names": ["resolve", "entry", "toPath", "ctime"]
}
