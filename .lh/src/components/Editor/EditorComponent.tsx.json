{
    "sourceFile": "src/components/Editor/EditorComponent.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1731752087686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731752095238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,8 +481,10 @@\n       console.error(`Error handling file: ${file.name}`, error);\n     }\n   };\n \n+  const { HandleImportData } = useImportDav(setNotesState);\n+\n   const goBack = () => {\n     const handleSync = () => {\n       const syncValue = localStorage.getItem(\"sync\");\n   \n@@ -501,9 +503,9 @@\n         const onedriveImport = new CustomEvent(\"onedriveImport\");\n         document.dispatchEvent(onedriveImport);\n       }\n     };\n-    \n+\n     navigate(\"/\");\n     handleSync();\n   }, [HandleImportData]);\n \n"
                },
                {
                    "date": 1731752101647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,31 +481,26 @@\n       console.error(`Error handling file: ${file.name}`, error);\n     }\n   };\n \n-  const { HandleImportData } = useImportDav(setNotesState);\n-\n   const goBack = () => {\n-    const handleSync = () => {\n-      const syncValue = localStorage.getItem(\"sync\");\n-  \n-      if (syncValue === \"dropbox\") {\n-        const dropboxImport = new CustomEvent(\"dropboxImport\");\n-        document.dispatchEvent(dropboxImport);\n-      } else if (syncValue === \"webdav\") {\n-        HandleImportData(); // now safely called\n-      } else if (syncValue === \"iCloud\") {\n-        const iCloudImport = new CustomEvent(\"iCloudImport\");\n-        document.dispatchEvent(iCloudImport);\n-      } else if (syncValue === \"googledrive\") {\n-        const driveImport = new CustomEvent(\"driveImport\");\n-        document.dispatchEvent(driveImport);\n-      } else if (syncValue === \"onedrive\") {\n-        const onedriveImport = new CustomEvent(\"onedriveImport\");\n-        document.dispatchEvent(onedriveImport);\n-      }\n-    };\n-\n+    const syncValue = localStorage.getItem(\"sync\");\n+    if (syncValue === \"dropbox\") {\n+      const dropboxExport = new CustomEvent(\"dropboxExport\");\n+      document.dispatchEvent(dropboxExport);\n+    } else if (syncValue === \"webdav\") {\n+      const { exportdata } = useExportDav();\n+      exportdata();\n+    } else if (syncValue === \"iCloud\") {\n+      const iCloudExport = new CustomEvent(\"iCloudExport\");\n+      document.dispatchEvent(iCloudExport);\n+    } else if (syncValue === \"googledrive\") {\n+      const driveExport = new CustomEvent(\"driveExport\");\n+      document.dispatchEvent(driveExport);\n+    } else if (syncValue === \"onedrive\") {\n+      const onedriveExport = new CustomEvent(\"onedriveExport\");\n+      document.dispatchEvent(onedriveExport);\n+    }\n     navigate(\"/\");\n     handleSync();\n   }, [HandleImportData]);\n \n"
                },
                {
                    "date": 1731752180324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,29 +481,32 @@\n       console.error(`Error handling file: ${file.name}`, error);\n     }\n   };\n \n-  const goBack = () => {\n-    const syncValue = localStorage.getItem(\"sync\");\n-    if (syncValue === \"dropbox\") {\n-      const dropboxExport = new CustomEvent(\"dropboxExport\");\n-      document.dispatchEvent(dropboxExport);\n-    } else if (syncValue === \"webdav\") {\n-      const { exportdata } = useExportDav();\n-      exportdata();\n-    } else if (syncValue === \"iCloud\") {\n-      const iCloudExport = new CustomEvent(\"iCloudExport\");\n-      document.dispatchEvent(iCloudExport);\n-    } else if (syncValue === \"googledrive\") {\n-      const driveExport = new CustomEvent(\"driveExport\");\n-      document.dispatchEvent(driveExport);\n-    } else if (syncValue === \"onedrive\") {\n-      const onedriveExport = new CustomEvent(\"onedriveExport\");\n-      document.dispatchEvent(onedriveExport);\n-    }\n-    navigate(\"/\");\n-    handleSync();\n-  }, [HandleImportData]);\n+  const useHandleSync = (navigate) => {\n+    const { exportdata } = useExportDav();\n+  \n+    return () => {\n+      const syncValue = localStorage.getItem(\"sync\");\n+  \n+      if (syncValue === \"dropbox\") {\n+        const dropboxExport = new CustomEvent(\"dropboxExport\");\n+        document.dispatchEvent(dropboxExport);\n+      } else if (syncValue === \"webdav\") {\n+        exportdata(); // Hook usage inside custom hook\n+      } else if (syncValue === \"iCloud\") {\n+        const iCloudExport = new CustomEvent(\"iCloudExport\");\n+        document.dispatchEvent(iCloudExport);\n+      } else if (syncValue === \"googledrive\") {\n+        const driveExport = new CustomEvent(\"driveExport\");\n+        document.dispatchEvent(driveExport);\n+      } else if (syncValue === \"onedrive\") {\n+        const onedriveExport = new CustomEvent(\"onedriveExport\");\n+        document.dispatchEvent(onedriveExport);\n+      }\n+      navigate(\"/\");\n+    };\n+  };\n \n   return (\n     <div>\n       <div\n"
                },
                {
                    "date": 1731752192779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,603 @@\n+import React, { useEffect, useState, useRef, useCallback } from \"react\";\n+import { useNavigate } from \"react-router-dom\";\n+import { Note } from \"../../store/types\";\n+import { EditorContent, useEditor, JSONContent } from \"@tiptap/react\";\n+import Toolbar from \"./Toolbar\";\n+import { isPlatform } from \"@ionic/react\";\n+import Drawer from \"./Drawer\";\n+import Find from \"./Find\";\n+import \"../../assets/css/editor.css\";\n+import extensions from \"../../lib/tiptap/index\";\n+import EditorSuggestion from \"../../lib/tiptap/exts/suggestions/EditorSuggestion\";\n+import NoteLinkExtension from \"../../lib/tiptap/exts/suggestions/NoteLinkSuggestion\";\n+import NoteLabelSuggestion from \"../../lib/tiptap/exts/suggestions/NoteLabelSuggestion\";\n+import DOMPurify from \"dompurify\";\n+import useNoteEditor from \"../../store/useNoteActions\";\n+import { useNotesState } from \"../../store/Activenote\";\n+import Icons from \"../../lib/remixicon-react\";\n+import Mousetrap from \"mousetrap\";\n+import getMimeType from \"../../utils/mimetype\";\n+import { saveImageToFileSystem } from \"../../utils/fileHandler\";\n+import { saveFileToFileSystem } from \"../../utils/fileHandler\";\n+import { useExportDav } from \"../../utils/Webdav/webDavUtil\";\n+\n+type Props = {\n+  note: Note;\n+  notesState: Record<string, Note>;\n+  setNotesState: (notes: Record<string, Note>) => void;\n+};\n+\n+function EditorComponent({ note, notesState, setNotesState }: Props) {\n+  const { activeNoteId, setActiveNoteId } = useNotesState();\n+  const buttonRef = useRef<HTMLButtonElement | null>(null);\n+  const findRef = useRef<HTMLDivElement | null>(null);\n+  const { title, handleChangeNoteContent } = useNoteEditor(\n+    activeNoteId,\n+    notesState,\n+    setNotesState\n+  );\n+  const [previousContent, setPreviousContent] = useState<JSONContent | null>(\n+    null\n+  );\n+  const [searchQuery] = useState<string>(\"\");\n+  const [filteredNotes, setFilteredNotes] =\n+    useState<Record<string, Note>>(notesState);\n+  const [sortingOption] = useState(\"updatedAt\");\n+\n+  useEffect(() => {\n+    const filtered = Object.values(notesState).filter((note) => {\n+      const titleMatch = note.title\n+        .toLowerCase()\n+        .includes(searchQuery.toLowerCase());\n+      return titleMatch;\n+    });\n+\n+    setFilteredNotes(\n+      Object.fromEntries(filtered.map((note) => [note.id, note]))\n+    );\n+  }, [searchQuery, notesState]);\n+\n+  const notesList = Object.values(filteredNotes).sort((a, b) => {\n+    switch (sortingOption) {\n+      case \"alphabetical\":\n+        return a.title.localeCompare(b.title);\n+      case \"createdAt\":\n+        const createdAtA = typeof a.createdAt === \"number\" ? a.createdAt : 0;\n+        const createdAtB = typeof b.createdAt === \"number\" ? b.createdAt : 0;\n+        return createdAtA - createdAtB;\n+      case \"updatedAt\":\n+      default:\n+        const updatedAtA = typeof a.updatedAt === \"number\" ? a.updatedAt : 0;\n+        const updatedAtB = typeof b.updatedAt === \"number\" ? b.updatedAt : 0;\n+        return updatedAtA - updatedAtB;\n+    }\n+  });\n+\n+  const [focusMode, setFocusMode] = useState(false);\n+  const [showFind, setShowFind] = useState(false);\n+  const [wd, setWd] = useState<boolean>(\n+    localStorage.getItem(\"expand-editor\") === \"true\"\n+  );\n+  const navigate = useNavigate();\n+\n+  const titleRef = useRef<HTMLDivElement>(null);\n+  const editorRef = useRef<any>(null);\n+\n+  useEffect(() => {\n+    setActiveNoteId(note.id);\n+  }, [note.id, setActiveNoteId]);\n+\n+  const uniqueLabels = Array.from(\n+    new Set(Object.values(notesState).flatMap((note) => note.labels))\n+  );\n+\n+  document.addEventListener(\"updateLabel\", (event: Event) => {\n+    const customEvent = event as CustomEvent;\n+    const labelToAdd = customEvent.detail.props;\n+\n+    // Ensure existingLabels is initialized correctly\n+    const existingLabels = note.labels || [];\n+\n+    // Check if the label already exists\n+    const labelExists = existingLabels.includes(labelToAdd);\n+\n+    // Only add the label if it doesn't already exist\n+    const updatedLabels = labelExists\n+      ? existingLabels\n+      : [...existingLabels, labelToAdd];\n+\n+    const jsonContent = editor?.getJSON() || {};\n+\n+    // Update the note content with the new list of labels\n+    handleChangeNoteContent(jsonContent, note.title, updatedLabels);\n+  });\n+\n+  const exts = [\n+    ...extensions,\n+    NoteLinkExtension.configure({\n+      notes: notesList,\n+    }),\n+    NoteLabelSuggestion.configure({\n+      uniqueLabels: uniqueLabels,\n+    }),\n+    EditorSuggestion.configure({\n+      noteId: note.id,\n+    }),\n+  ];\n+\n+  const editor = useEditor(\n+    {\n+      extensions: exts,\n+      content: note.content,\n+      onUpdate: ({ editor }) => {\n+        const editorContent = editor.getJSON();\n+\n+        // Handle note content change\n+        handleChangeNoteContent(editorContent || {}, title);\n+\n+        // Compare previous and current content\n+        if (previousContent) {\n+          const previousLabels = findNoteLabels(previousContent);\n+          const currentLabels = findNoteLabels(editorContent);\n+\n+          // Check for deleted labels\n+          previousLabels.forEach((label) => {\n+            if (\n+              !currentLabels.some(\n+                (currentLabel) => currentLabel.attrs.id === label.attrs.id\n+              )\n+            ) {\n+              console.log(`Label deleted: ${label.attrs.label}`);\n+\n+              // Remove the deleted label from the labels array\n+              const updatedLabels = note.labels.filter(\n+                (noteLabel) => noteLabel !== label.attrs.label\n+              );\n+\n+              // Update the note content with the new labels\n+              handleChangeNoteContent(editorContent, note.title, updatedLabels);\n+            }\n+          });\n+        }\n+\n+        // Update previous content\n+        setPreviousContent(editorContent);\n+      },\n+    },\n+    [note.id]\n+  );\n+\n+  useEffect(() => {\n+    if (editor) {\n+      editor.commands.focus();\n+      editorRef.current = editor; // Store editor in ref\n+    }\n+  }, [editor]);\n+\n+  useEffect(() => {\n+    const handleKeyPress = (event: KeyboardEvent) => {\n+      if (event.key === \"f\" && (event.metaKey || event.ctrlKey)) {\n+        event.preventDefault();\n+        setShowFind(true);\n+      }\n+    };\n+\n+    window.addEventListener(\"keydown\", handleKeyPress);\n+    return () => {\n+      window.removeEventListener(\"keydown\", handleKeyPress);\n+    };\n+  }, []);\n+\n+  document.addEventListener(\"showFind\", () => {\n+    setShowFind((prevShowFind) => !prevShowFind);\n+  });\n+\n+  useEffect(() => {\n+    setWd(localStorage.getItem(\"expand-editor\") === \"true\");\n+  }, []);\n+\n+  const handleTitleChange = (event: React.ChangeEvent<HTMLDivElement>) => {\n+    const newTitle = DOMPurify.sanitize(event.currentTarget.innerHTML);\n+    handleChangeNoteContent(editor?.getJSON() || {}, newTitle);\n+  };\n+\n+  const handleTitlePaste = (event: React.ClipboardEvent<HTMLDivElement>) => {\n+    event.preventDefault();\n+    const text = event.clipboardData.getData(\"text/plain\");\n+    document.execCommand(\"insertText\", false, text);\n+  };\n+\n+  // Utility function to find all noteLabel objects in the JSON content\n+  const findNoteLabels = (content: JSONContent) => {\n+    const labels: any[] = [];\n+    const traverse = (node: any) => {\n+      if (node.type === \"noteLabel\") {\n+        labels.push(node);\n+      }\n+      if (node.content) {\n+        node.content.forEach(traverse);\n+      }\n+    };\n+    traverse(content);\n+    return labels;\n+  };\n+\n+  const handleshowFind = () => {\n+    if (buttonRef.current) {\n+      setShowFind(true);\n+    }\n+  };\n+\n+  const handleKeyDownTitle = (event: React.KeyboardEvent<HTMLDivElement>) => {\n+    if (event.key === \"Enter\") {\n+      event.preventDefault();\n+      editorRef.current?.commands.focus(); // Focus the editor\n+    }\n+  };\n+\n+  const preventKeyboardToggle = (event: any) => {\n+    event.preventDefault();\n+  };\n+\n+  const setLink = useCallback(() => {\n+    const previousUrl = editor?.getAttributes(\"link\").href;\n+    const url = window.prompt(\"URL\", previousUrl);\n+\n+    // cancelled\n+    if (url === null) {\n+      return;\n+    }\n+\n+    // empty\n+    if (url === \"\") {\n+      editor?.chain().focus().extendMarkRange(\"link\").unsetLink().run();\n+\n+      return;\n+    }\n+\n+    // update link\n+    editor\n+      ?.chain()\n+      .focus()\n+      .extendMarkRange(\"link\")\n+      .setLink({ href: url })\n+      .run();\n+  }, [editor]);\n+\n+  useEffect(() => {\n+    // Mousetrap key bindings\n+    Mousetrap.bind(\"mod+k\", (e) => {\n+      e.preventDefault();\n+      setLink();\n+    });\n+    Mousetrap.bind(\"mod+shift+x\", (e) => {\n+      e.preventDefault();\n+      editor?.chain().focus().toggleStrike().run();\n+    });\n+    Mousetrap.bind(\"mod+shift+h\", (e) => {\n+      e.preventDefault();\n+      editor?.chain().focus().setHighlight({color: \"bg-yellow-200 dark:bg-yellow-100\"}).run();\n+    });\n+    Mousetrap.bind(\"mod+.\", (e) => {\n+      e.preventDefault();\n+      editor?.commands.toggleSuperscript();\n+    });\n+    Mousetrap.bind(\"alt+,\", (e) => {\n+      e.preventDefault();\n+      editor?.commands.toggleSubscript();\n+    });\n+    Mousetrap.bind(\"mod+e\", (e) => {\n+      e.preventDefault();\n+      editor?.chain().focus().toggleCode().run();\n+    });\n+    Mousetrap.bind(\"alt+1\", (e) => {\n+      e.preventDefault();\n+      editor?.chain().focus().toggleHeading({ level: 1 }).run();\n+    });\n+    Mousetrap.bind(\"alt+2\", (e) => {\n+      e.preventDefault();\n+      editor?.chain().focus().toggleHeading({ level: 2 }).run();\n+    });\n+    Mousetrap.bind(\"alt+3\", (e) => {\n+      e.preventDefault();\n+      editor?.chain().focus().toggleHeading({ level: 3 }).run();\n+    });\n+    Mousetrap.bind(\"alt+4\", (e) => {\n+      e.preventDefault();\n+      editor?.chain().focus().toggleHeading({ level: 4 }).run();\n+    });\n+    Mousetrap.bind(\"alt+5\", (e) => {\n+      e.preventDefault();\n+      editor?.chain().focus().toggleHeading({ level: 5 }).run();\n+    });\n+    Mousetrap.bind(\"alt+6\", (e) => {\n+      e.preventDefault();\n+      editor?.chain().focus().toggleHeading({ level: 6 }).run();\n+    });\n+    Mousetrap.bind(\"mod+shift+7\", (e) => {\n+      e.preventDefault();\n+      editor?.chain().focus().toggleOrderedList().run();\n+    });\n+    Mousetrap.bind(\"mod+shift+8\", (e) => {\n+      e.preventDefault();\n+      editor?.chain().focus().toggleBulletList().run();\n+    });\n+    Mousetrap.bind(\"mod+shift+b\", (e) => {\n+      e.preventDefault();\n+      editor?.chain().focus().toggleBlockquote().run();\n+    });\n+    Mousetrap.bind(\"mod+alt+c\", (e) => {\n+      e.preventDefault();\n+      editor?.chain().focus().toggleCodeBlock().run();\n+    });\n+\n+    // Cleanup all key bindings on unmount\n+    return () => {\n+      Mousetrap.unbind(\"mod+k\");\n+      Mousetrap.unbind(\"mod+shift+x\");\n+      Mousetrap.unbind(\"mod+shift+h\");\n+      Mousetrap.unbind(\"mod+.\");\n+      Mousetrap.unbind(\"alt+,\");\n+      Mousetrap.unbind(\"mod+e\");\n+      Mousetrap.unbind(\"alt+1\");\n+      Mousetrap.unbind(\"alt+2\");\n+      Mousetrap.unbind(\"alt+3\");\n+      Mousetrap.unbind(\"alt+4\");\n+      Mousetrap.unbind(\"alt+5\");\n+      Mousetrap.unbind(\"alt+6\");\n+      Mousetrap.unbind(\"mod+shift+7\");\n+      Mousetrap.unbind(\"mod+shift+8\");\n+      Mousetrap.unbind(\"mod+shift+b\");\n+      Mousetrap.unbind(\"mod+alt+c\");\n+    };\n+  }, [editor, setLink]);\n+\n+  const handleDrop = async (event: React.DragEvent<HTMLDivElement>) => {\n+    event.preventDefault();\n+    const items = event.dataTransfer.items;\n+    await processItems(items);\n+  };\n+\n+  const handlePaste = async (event: React.ClipboardEvent<HTMLDivElement>) => {\n+    event.preventDefault();\n+    event.stopPropagation();\n+\n+    const items = event.clipboardData.items;\n+    document.execCommand(\"insertText\", false, \" \"); // Add space before pasting\n+\n+    for (let i = 0; i < items.length; i++) {\n+      const item = items[i];\n+\n+      if (item.kind === \"file\") {\n+        // Handle pasted file (like from file manager)\n+        const file = item.getAsFile();\n+        if (file) {\n+          await handleFileByType(file); // Handle file processing as usual\n+        }\n+      } else if (item.kind === \"string\" && item.type === \"text/html\") {\n+        // Handle HTML content (like pasting from a web page)\n+        item.getAsString(async (htmlContent: string) => {\n+          const imageUrl = extractImageUrlFromHtml(htmlContent);\n+          if (imageUrl) {\n+            editor?.chain().setImage({ src: imageUrl }).run(); // Insert image from URL\n+          } else {\n+            // If no image URL, fallback to pasting the content as plain HTML/text\n+            editor?.chain().insertContent(htmlContent).run();\n+          }\n+        });\n+      } else if (item.kind === \"string\" && item.type === \"text/plain\") {\n+        // Handle plain text or URLs\n+        item.getAsString(async (textContent: string) => {\n+          if (isBase64Image(textContent)) {\n+            // If the content is a base64 image, insert it directly\n+            editor?.chain().setImage({ src: textContent }).run();\n+          } else if (isValidUrl(textContent)) {\n+            // If it's a valid URL, check if it's an image URL\n+            if (isImageUrl(textContent)) {\n+              editor?.chain().setImage({ src: textContent }).run(); // Insert image\n+            } else {\n+              // If it's not an image URL, insert it as plain text or link\n+              editor?.chain().insertContent(textContent).run();\n+            }\n+          } else {\n+            // If neither base64 nor a valid URL, insert it as plain text\n+            editor?.chain().insertContent(textContent).run();\n+          }\n+        });\n+      }\n+    }\n+  };\n+\n+  // Helper to check if the pasted content is a base64 image\n+  const isBase64Image = (str: string): boolean => {\n+    return str.startsWith(\"data:image/\") && str.includes(\"base64,\");\n+  };\n+\n+  // Helper to extract image URL from pasted HTML content\n+  const extractImageUrlFromHtml = (htmlContent: string): string | null => {\n+    const tempDiv = document.createElement(\"div\");\n+    tempDiv.innerHTML = htmlContent;\n+    const imgTag = tempDiv.querySelector(\"img\");\n+\n+    return imgTag ? imgTag.src : null;\n+  };\n+\n+  // Helper to validate if a string is a valid URL\n+  const isValidUrl = (string: string): boolean => {\n+    try {\n+      new URL(string);\n+      return true;\n+    } catch (_) {\n+      return false;\n+    }\n+  };\n+\n+  // Helper to check if a URL is an image URL (jpg, png, gif, etc.)\n+  const isImageUrl = (url: string): boolean => {\n+    const imagePattern = /\\.(jpeg|jpg|gif|png|bmp|webp)$/i;\n+    return imagePattern.test(url);\n+  };\n+\n+  const processItems = async (items: DataTransferItemList) => {\n+    for (let i = 0; i < items.length; i++) {\n+      const item = items[i];\n+      if (item.kind === \"file\") {\n+        const file = item.getAsFile();\n+        if (file) {\n+          const fileType = getMimeType(file.name);\n+          if (fileType) {\n+            await handleFileByType(file);\n+          } else {\n+            console.warn(`Unsupported file type: ${file.type}`);\n+          }\n+        }\n+      }\n+    }\n+  };\n+\n+  const handleFileByType = async (file: File) => {\n+    try {\n+      let fileUrl = \"\",\n+        fileName = \"\";\n+      const mimeType = file.type;\n+\n+      if (mimeType.startsWith(\"image/\")) {\n+        const { imageUrl } = await saveImageToFileSystem(file, note.id);\n+        editor?.chain().setImage({ src: imageUrl }).run();\n+      } else if (mimeType.startsWith(\"video/\")) {\n+        ({ fileUrl, fileName } = await saveFileToFileSystem(file, note.id));\n+        //@ts-ignore\n+        editor?.chain().setVideo({ src: fileUrl }).run();\n+      } else if (mimeType.startsWith(\"audio/\")) {\n+        ({ fileUrl, fileName } = await saveFileToFileSystem(file, note.id));\n+        //@ts-ignore\n+        editor?.chain().setAudio({ src: fileUrl }).run();\n+      } else {\n+        ({ fileUrl, fileName } = await saveFileToFileSystem(file, note.id));\n+        //@ts-ignore\n+        editor?.chain().setFileEmbed(fileUrl, fileName).run();\n+      }\n+    } catch (error) {\n+      console.error(`Error handling file: ${file.name}`, error);\n+    }\n+  };\n+\n+  const goBack = () => {\n+    const { exportdata } = useExportDav();\n+  \n+    return () => {\n+      const syncValue = localStorage.getItem(\"sync\");\n+  \n+      if (syncValue === \"dropbox\") {\n+        const dropboxExport = new CustomEvent(\"dropboxExport\");\n+        document.dispatchEvent(dropboxExport);\n+      } else if (syncValue === \"webdav\") {\n+        exportdata(); // Hook usage inside custom hook\n+      } else if (syncValue === \"iCloud\") {\n+        const iCloudExport = new CustomEvent(\"iCloudExport\");\n+        document.dispatchEvent(iCloudExport);\n+      } else if (syncValue === \"googledrive\") {\n+        const driveExport = new CustomEvent(\"driveExport\");\n+        document.dispatchEvent(driveExport);\n+      } else if (syncValue === \"onedrive\") {\n+        const onedriveExport = new CustomEvent(\"onedriveExport\");\n+        document.dispatchEvent(onedriveExport);\n+      }\n+      navigate(\"/\");\n+    };\n+  };\n+\n+  return (\n+    <div>\n+      <div\n+        className={`editor overflow-auto h-full justify-center items-start px-4 ${\n+          wd ? \"sm:px-10 md:px-10 lg:px-30\" : \"sm:px-10 md:px-20 lg:px-60\"\n+        } text-black dark:text-[color:var(--selected-dark-text)]`}\n+        onDragOver={(e) => e.preventDefault()}\n+        onDrop={handleDrop}\n+      >\n+        <Toolbar note={note} noteId={note.id} editor={editor} />\n+        <div\n+          className={`sm:hidden bg-white bg-opacity-95 dark:bg-[#232222] fixed inset-x-0 overflow-auto h-auto w-full z-40 no-scrollbar flex justify-between`}\n+        >\n+          <button\n+            className=\"p-2 align-start rounded-md text-white bg-transparent cursor-pointer\"\n+            onClick={goBack}\n+          >\n+            <Icons.ArrowLeftLineIcon className=\"border-none dark:text-[color:var(--selected-dark-text)] text-neutral-800 text-xl w-7 h-7\" />\n+          </button>\n+          <div className=\"flex\">\n+            <button\n+              className=\"p-2 rounded-md text-white bg-transparent cursor-pointer\"\n+              onClick={() => setFocusMode((prevFocusMode) => !prevFocusMode)}\n+            >\n+              <Icons.Focus3LineIcon\n+                className={`border-none ${\n+                  focusMode ? \"text-amber-400\" : \"text-neutral-800\"\n+                } dark:text-[color:var(--selected-dark-text)] text-xl w-7 h-7`}\n+              />\n+            </button>\n+\n+            <button\n+              className=\"p-2 align-end rounded-md text-white bg-transparent cursor-pointer\"\n+              onClick={handleshowFind}\n+              ref={buttonRef}\n+            >\n+              <Icons.Search2LineIcon\n+                className={`border-none ${\n+                  focusMode ? \"hidden\" : \"block\"\n+                } dark:text-[color:var(--selected-dark-text)] text-neutral-800 text-xl w-7 h-7`}\n+              />\n+            </button>\n+          </div>\n+          {/* Portal appears below the button */}\n+          {showFind && (\n+            <div\n+              ref={findRef}\n+              className={`fixed ${showFind ? \"block\" : \"hidden\"}`}\n+              style={{\n+                zIndex: 80,\n+              }}\n+            >\n+              <div className=\"fixed inset-x-0 flex justify-center\">\n+                <div className=\"w-full bg-white px-4 sm:px-10 md:px-20 lg:px-60\">\n+                  <Find editor={editor} setShowFind={setShowFind} />\n+                </div>\n+              </div>\n+            </div>\n+          )}\n+        </div>\n+\n+        <div\n+          contentEditable\n+          onPaste={handleTitlePaste}\n+          suppressContentEditableWarning\n+          onTouchStart={preventKeyboardToggle}\n+          className={`text-3xl font-bold overflow-y-scroll outline-none ${\n+            isPlatform(\"android\") ? \"mt-10 sm:pt-14\" : \"md:pt-14\"\n+          } ${isPlatform(\"ios\") ? \"mt-10 sm:pt-14\" : \"md:pt-14\"}`}\n+          onBlur={handleTitleChange}\n+          onKeyDown={handleKeyDownTitle} // Add onKeyDown to handle Enter key\n+          dangerouslySetInnerHTML={{ __html: note.title }}\n+          ref={titleRef} // Attach ref to title field\n+        />\n+        <div>\n+          <div className=\"py-2 h-full w-full\" id=\"container\">\n+            <EditorContent\n+              onPaste={handlePaste}\n+              editor={editor}\n+              onTouchStart={preventKeyboardToggle}\n+              className=\"prose dark:text-neutral-100 max-w-none prose-indigo mb-12\"\n+            />\n+          </div>\n+        </div>\n+\n+        <div className={`${focusMode ? \"hidden\" : \"block\"} sm:hidden`}>\n+          <Drawer noteId={note.id} note={note} editor={editor} />\n+        </div>\n+      </div>\n+    </div>\n+  );\n+}\n+\n+export default EditorComponent;\n"
                },
                {
                    "date": 1731752232318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -600,607 +600,4 @@\n   );\n }\n \n export default EditorComponent;\n-import React, { useEffect, useState, useRef, useCallback } from \"react\";\n-import { useNavigate } from \"react-router-dom\";\n-import { Note } from \"../../store/types\";\n-import { EditorContent, useEditor, JSONContent } from \"@tiptap/react\";\n-import Toolbar from \"./Toolbar\";\n-import { isPlatform } from \"@ionic/react\";\n-import Drawer from \"./Drawer\";\n-import Find from \"./Find\";\n-import \"../../assets/css/editor.css\";\n-import extensions from \"../../lib/tiptap/index\";\n-import EditorSuggestion from \"../../lib/tiptap/exts/suggestions/EditorSuggestion\";\n-import NoteLinkExtension from \"../../lib/tiptap/exts/suggestions/NoteLinkSuggestion\";\n-import NoteLabelSuggestion from \"../../lib/tiptap/exts/suggestions/NoteLabelSuggestion\";\n-import DOMPurify from \"dompurify\";\n-import useNoteEditor from \"../../store/useNoteActions\";\n-import { useNotesState } from \"../../store/Activenote\";\n-import Icons from \"../../lib/remixicon-react\";\n-import Mousetrap from \"mousetrap\";\n-import getMimeType from \"../../utils/mimetype\";\n-import { saveImageToFileSystem } from \"../../utils/fileHandler\";\n-import { saveFileToFileSystem } from \"../../utils/fileHandler\";\n-import { useExportDav } from \"../../utils/Webdav/webDavUtil\";\n-\n-type Props = {\n-  note: Note;\n-  notesState: Record<string, Note>;\n-  setNotesState: (notes: Record<string, Note>) => void;\n-};\n-\n-function EditorComponent({ note, notesState, setNotesState }: Props) {\n-  const { activeNoteId, setActiveNoteId } = useNotesState();\n-  const buttonRef = useRef<HTMLButtonElement | null>(null);\n-  const findRef = useRef<HTMLDivElement | null>(null);\n-  const { title, handleChangeNoteContent } = useNoteEditor(\n-    activeNoteId,\n-    notesState,\n-    setNotesState\n-  );\n-  const [previousContent, setPreviousContent] = useState<JSONContent | null>(\n-    null\n-  );\n-  const [searchQuery] = useState<string>(\"\");\n-  const [filteredNotes, setFilteredNotes] =\n-    useState<Record<string, Note>>(notesState);\n-  const [sortingOption] = useState(\"updatedAt\");\n-\n-  useEffect(() => {\n-    const filtered = Object.values(notesState).filter((note) => {\n-      const titleMatch = note.title\n-        .toLowerCase()\n-        .includes(searchQuery.toLowerCase());\n-      return titleMatch;\n-    });\n-\n-    setFilteredNotes(\n-      Object.fromEntries(filtered.map((note) => [note.id, note]))\n-    );\n-  }, [searchQuery, notesState]);\n-\n-  const notesList = Object.values(filteredNotes).sort((a, b) => {\n-    switch (sortingOption) {\n-      case \"alphabetical\":\n-        return a.title.localeCompare(b.title);\n-      case \"createdAt\":\n-        const createdAtA = typeof a.createdAt === \"number\" ? a.createdAt : 0;\n-        const createdAtB = typeof b.createdAt === \"number\" ? b.createdAt : 0;\n-        return createdAtA - createdAtB;\n-      case \"updatedAt\":\n-      default:\n-        const updatedAtA = typeof a.updatedAt === \"number\" ? a.updatedAt : 0;\n-        const updatedAtB = typeof b.updatedAt === \"number\" ? b.updatedAt : 0;\n-        return updatedAtA - updatedAtB;\n-    }\n-  });\n-\n-  const [focusMode, setFocusMode] = useState(false);\n-  const [showFind, setShowFind] = useState(false);\n-  const [wd, setWd] = useState<boolean>(\n-    localStorage.getItem(\"expand-editor\") === \"true\"\n-  );\n-  const navigate = useNavigate();\n-\n-  const titleRef = useRef<HTMLDivElement>(null);\n-  const editorRef = useRef<any>(null);\n-\n-  useEffect(() => {\n-    setActiveNoteId(note.id);\n-  }, [note.id, setActiveNoteId]);\n-\n-  const uniqueLabels = Array.from(\n-    new Set(Object.values(notesState).flatMap((note) => note.labels))\n-  );\n-\n-  document.addEventListener(\"updateLabel\", (event: Event) => {\n-    const customEvent = event as CustomEvent;\n-    const labelToAdd = customEvent.detail.props;\n-\n-    // Ensure existingLabels is initialized correctly\n-    const existingLabels = note.labels || [];\n-\n-    // Check if the label already exists\n-    const labelExists = existingLabels.includes(labelToAdd);\n-\n-    // Only add the label if it doesn't already exist\n-    const updatedLabels = labelExists\n-      ? existingLabels\n-      : [...existingLabels, labelToAdd];\n-\n-    const jsonContent = editor?.getJSON() || {};\n-\n-    // Update the note content with the new list of labels\n-    handleChangeNoteContent(jsonContent, note.title, updatedLabels);\n-  });\n-\n-  const exts = [\n-    ...extensions,\n-    NoteLinkExtension.configure({\n-      notes: notesList,\n-    }),\n-    NoteLabelSuggestion.configure({\n-      uniqueLabels: uniqueLabels,\n-    }),\n-    EditorSuggestion.configure({\n-      noteId: note.id,\n-    }),\n-  ];\n-\n-  const editor = useEditor(\n-    {\n-      extensions: exts,\n-      content: note.content,\n-      onUpdate: ({ editor }) => {\n-        const editorContent = editor.getJSON();\n-\n-        // Handle note content change\n-        handleChangeNoteContent(editorContent || {}, title);\n-\n-        // Compare previous and current content\n-        if (previousContent) {\n-          const previousLabels = findNoteLabels(previousContent);\n-          const currentLabels = findNoteLabels(editorContent);\n-\n-          // Check for deleted labels\n-          previousLabels.forEach((label) => {\n-            if (\n-              !currentLabels.some(\n-                (currentLabel) => currentLabel.attrs.id === label.attrs.id\n-              )\n-            ) {\n-              console.log(`Label deleted: ${label.attrs.label}`);\n-\n-              // Remove the deleted label from the labels array\n-              const updatedLabels = note.labels.filter(\n-                (noteLabel) => noteLabel !== label.attrs.label\n-              );\n-\n-              // Update the note content with the new labels\n-              handleChangeNoteContent(editorContent, note.title, updatedLabels);\n-            }\n-          });\n-        }\n-\n-        // Update previous content\n-        setPreviousContent(editorContent);\n-      },\n-    },\n-    [note.id]\n-  );\n-\n-  useEffect(() => {\n-    if (editor) {\n-      editor.commands.focus();\n-      editorRef.current = editor; // Store editor in ref\n-    }\n-  }, [editor]);\n-\n-  useEffect(() => {\n-    const handleKeyPress = (event: KeyboardEvent) => {\n-      if (event.key === \"f\" && (event.metaKey || event.ctrlKey)) {\n-        event.preventDefault();\n-        setShowFind(true);\n-      }\n-    };\n-\n-    window.addEventListener(\"keydown\", handleKeyPress);\n-    return () => {\n-      window.removeEventListener(\"keydown\", handleKeyPress);\n-    };\n-  }, []);\n-\n-  document.addEventListener(\"showFind\", () => {\n-    setShowFind((prevShowFind) => !prevShowFind);\n-  });\n-\n-  useEffect(() => {\n-    setWd(localStorage.getItem(\"expand-editor\") === \"true\");\n-  }, []);\n-\n-  const handleTitleChange = (event: React.ChangeEvent<HTMLDivElement>) => {\n-    const newTitle = DOMPurify.sanitize(event.currentTarget.innerHTML);\n-    handleChangeNoteContent(editor?.getJSON() || {}, newTitle);\n-  };\n-\n-  const handleTitlePaste = (event: React.ClipboardEvent<HTMLDivElement>) => {\n-    event.preventDefault();\n-    const text = event.clipboardData.getData(\"text/plain\");\n-    document.execCommand(\"insertText\", false, text);\n-  };\n-\n-  // Utility function to find all noteLabel objects in the JSON content\n-  const findNoteLabels = (content: JSONContent) => {\n-    const labels: any[] = [];\n-    const traverse = (node: any) => {\n-      if (node.type === \"noteLabel\") {\n-        labels.push(node);\n-      }\n-      if (node.content) {\n-        node.content.forEach(traverse);\n-      }\n-    };\n-    traverse(content);\n-    return labels;\n-  };\n-\n-  const handleshowFind = () => {\n-    if (buttonRef.current) {\n-      setShowFind(true);\n-    }\n-  };\n-\n-  const handleKeyDownTitle = (event: React.KeyboardEvent<HTMLDivElement>) => {\n-    if (event.key === \"Enter\") {\n-      event.preventDefault();\n-      editorRef.current?.commands.focus(); // Focus the editor\n-    }\n-  };\n-\n-  const preventKeyboardToggle = (event: any) => {\n-    event.preventDefault();\n-  };\n-\n-  const setLink = useCallback(() => {\n-    const previousUrl = editor?.getAttributes(\"link\").href;\n-    const url = window.prompt(\"URL\", previousUrl);\n-\n-    // cancelled\n-    if (url === null) {\n-      return;\n-    }\n-\n-    // empty\n-    if (url === \"\") {\n-      editor?.chain().focus().extendMarkRange(\"link\").unsetLink().run();\n-\n-      return;\n-    }\n-\n-    // update link\n-    editor\n-      ?.chain()\n-      .focus()\n-      .extendMarkRange(\"link\")\n-      .setLink({ href: url })\n-      .run();\n-  }, [editor]);\n-\n-  useEffect(() => {\n-    // Mousetrap key bindings\n-    Mousetrap.bind(\"mod+k\", (e) => {\n-      e.preventDefault();\n-      setLink();\n-    });\n-    Mousetrap.bind(\"mod+shift+x\", (e) => {\n-      e.preventDefault();\n-      editor?.chain().focus().toggleStrike().run();\n-    });\n-    Mousetrap.bind(\"mod+shift+h\", (e) => {\n-      e.preventDefault();\n-      editor?.chain().focus().setHighlight({color: \"bg-yellow-200 dark:bg-yellow-100\"}).run();\n-    });\n-    Mousetrap.bind(\"mod+.\", (e) => {\n-      e.preventDefault();\n-      editor?.commands.toggleSuperscript();\n-    });\n-    Mousetrap.bind(\"alt+,\", (e) => {\n-      e.preventDefault();\n-      editor?.commands.toggleSubscript();\n-    });\n-    Mousetrap.bind(\"mod+e\", (e) => {\n-      e.preventDefault();\n-      editor?.chain().focus().toggleCode().run();\n-    });\n-    Mousetrap.bind(\"alt+1\", (e) => {\n-      e.preventDefault();\n-      editor?.chain().focus().toggleHeading({ level: 1 }).run();\n-    });\n-    Mousetrap.bind(\"alt+2\", (e) => {\n-      e.preventDefault();\n-      editor?.chain().focus().toggleHeading({ level: 2 }).run();\n-    });\n-    Mousetrap.bind(\"alt+3\", (e) => {\n-      e.preventDefault();\n-      editor?.chain().focus().toggleHeading({ level: 3 }).run();\n-    });\n-    Mousetrap.bind(\"alt+4\", (e) => {\n-      e.preventDefault();\n-      editor?.chain().focus().toggleHeading({ level: 4 }).run();\n-    });\n-    Mousetrap.bind(\"alt+5\", (e) => {\n-      e.preventDefault();\n-      editor?.chain().focus().toggleHeading({ level: 5 }).run();\n-    });\n-    Mousetrap.bind(\"alt+6\", (e) => {\n-      e.preventDefault();\n-      editor?.chain().focus().toggleHeading({ level: 6 }).run();\n-    });\n-    Mousetrap.bind(\"mod+shift+7\", (e) => {\n-      e.preventDefault();\n-      editor?.chain().focus().toggleOrderedList().run();\n-    });\n-    Mousetrap.bind(\"mod+shift+8\", (e) => {\n-      e.preventDefault();\n-      editor?.chain().focus().toggleBulletList().run();\n-    });\n-    Mousetrap.bind(\"mod+shift+b\", (e) => {\n-      e.preventDefault();\n-      editor?.chain().focus().toggleBlockquote().run();\n-    });\n-    Mousetrap.bind(\"mod+alt+c\", (e) => {\n-      e.preventDefault();\n-      editor?.chain().focus().toggleCodeBlock().run();\n-    });\n-\n-    // Cleanup all key bindings on unmount\n-    return () => {\n-      Mousetrap.unbind(\"mod+k\");\n-      Mousetrap.unbind(\"mod+shift+x\");\n-      Mousetrap.unbind(\"mod+shift+h\");\n-      Mousetrap.unbind(\"mod+.\");\n-      Mousetrap.unbind(\"alt+,\");\n-      Mousetrap.unbind(\"mod+e\");\n-      Mousetrap.unbind(\"alt+1\");\n-      Mousetrap.unbind(\"alt+2\");\n-      Mousetrap.unbind(\"alt+3\");\n-      Mousetrap.unbind(\"alt+4\");\n-      Mousetrap.unbind(\"alt+5\");\n-      Mousetrap.unbind(\"alt+6\");\n-      Mousetrap.unbind(\"mod+shift+7\");\n-      Mousetrap.unbind(\"mod+shift+8\");\n-      Mousetrap.unbind(\"mod+shift+b\");\n-      Mousetrap.unbind(\"mod+alt+c\");\n-    };\n-  }, [editor, setLink]);\n-\n-  const handleDrop = async (event: React.DragEvent<HTMLDivElement>) => {\n-    event.preventDefault();\n-    const items = event.dataTransfer.items;\n-    await processItems(items);\n-  };\n-\n-  const handlePaste = async (event: React.ClipboardEvent<HTMLDivElement>) => {\n-    event.preventDefault();\n-    event.stopPropagation();\n-\n-    const items = event.clipboardData.items;\n-    document.execCommand(\"insertText\", false, \" \"); // Add space before pasting\n-\n-    for (let i = 0; i < items.length; i++) {\n-      const item = items[i];\n-\n-      if (item.kind === \"file\") {\n-        // Handle pasted file (like from file manager)\n-        const file = item.getAsFile();\n-        if (file) {\n-          await handleFileByType(file); // Handle file processing as usual\n-        }\n-      } else if (item.kind === \"string\" && item.type === \"text/html\") {\n-        // Handle HTML content (like pasting from a web page)\n-        item.getAsString(async (htmlContent: string) => {\n-          const imageUrl = extractImageUrlFromHtml(htmlContent);\n-          if (imageUrl) {\n-            editor?.chain().setImage({ src: imageUrl }).run(); // Insert image from URL\n-          } else {\n-            // If no image URL, fallback to pasting the content as plain HTML/text\n-            editor?.chain().insertContent(htmlContent).run();\n-          }\n-        });\n-      } else if (item.kind === \"string\" && item.type === \"text/plain\") {\n-        // Handle plain text or URLs\n-        item.getAsString(async (textContent: string) => {\n-          if (isBase64Image(textContent)) {\n-            // If the content is a base64 image, insert it directly\n-            editor?.chain().setImage({ src: textContent }).run();\n-          } else if (isValidUrl(textContent)) {\n-            // If it's a valid URL, check if it's an image URL\n-            if (isImageUrl(textContent)) {\n-              editor?.chain().setImage({ src: textContent }).run(); // Insert image\n-            } else {\n-              // If it's not an image URL, insert it as plain text or link\n-              editor?.chain().insertContent(textContent).run();\n-            }\n-          } else {\n-            // If neither base64 nor a valid URL, insert it as plain text\n-            editor?.chain().insertContent(textContent).run();\n-          }\n-        });\n-      }\n-    }\n-  };\n-\n-  // Helper to check if the pasted content is a base64 image\n-  const isBase64Image = (str: string): boolean => {\n-    return str.startsWith(\"data:image/\") && str.includes(\"base64,\");\n-  };\n-\n-  // Helper to extract image URL from pasted HTML content\n-  const extractImageUrlFromHtml = (htmlContent: string): string | null => {\n-    const tempDiv = document.createElement(\"div\");\n-    tempDiv.innerHTML = htmlContent;\n-    const imgTag = tempDiv.querySelector(\"img\");\n-\n-    return imgTag ? imgTag.src : null;\n-  };\n-\n-  // Helper to validate if a string is a valid URL\n-  const isValidUrl = (string: string): boolean => {\n-    try {\n-      new URL(string);\n-      return true;\n-    } catch (_) {\n-      return false;\n-    }\n-  };\n-\n-  // Helper to check if a URL is an image URL (jpg, png, gif, etc.)\n-  const isImageUrl = (url: string): boolean => {\n-    const imagePattern = /\\.(jpeg|jpg|gif|png|bmp|webp)$/i;\n-    return imagePattern.test(url);\n-  };\n-\n-  const processItems = async (items: DataTransferItemList) => {\n-    for (let i = 0; i < items.length; i++) {\n-      const item = items[i];\n-      if (item.kind === \"file\") {\n-        const file = item.getAsFile();\n-        if (file) {\n-          const fileType = getMimeType(file.name);\n-          if (fileType) {\n-            await handleFileByType(file);\n-          } else {\n-            console.warn(`Unsupported file type: ${file.type}`);\n-          }\n-        }\n-      }\n-    }\n-  };\n-\n-  const handleFileByType = async (file: File) => {\n-    try {\n-      let fileUrl = \"\",\n-        fileName = \"\";\n-      const mimeType = file.type;\n-\n-      if (mimeType.startsWith(\"image/\")) {\n-        const { imageUrl } = await saveImageToFileSystem(file, note.id);\n-        editor?.chain().setImage({ src: imageUrl }).run();\n-      } else if (mimeType.startsWith(\"video/\")) {\n-        ({ fileUrl, fileName } = await saveFileToFileSystem(file, note.id));\n-        //@ts-ignore\n-        editor?.chain().setVideo({ src: fileUrl }).run();\n-      } else if (mimeType.startsWith(\"audio/\")) {\n-        ({ fileUrl, fileName } = await saveFileToFileSystem(file, note.id));\n-        //@ts-ignore\n-        editor?.chain().setAudio({ src: fileUrl }).run();\n-      } else {\n-        ({ fileUrl, fileName } = await saveFileToFileSystem(file, note.id));\n-        //@ts-ignore\n-        editor?.chain().setFileEmbed(fileUrl, fileName).run();\n-      }\n-    } catch (error) {\n-      console.error(`Error handling file: ${file.name}`, error);\n-    }\n-  };\n-\n-  const useHandleSync = (navigate) => {\n-    const { exportdata } = useExportDav();\n-  \n-    return () => {\n-      const syncValue = localStorage.getItem(\"sync\");\n-  \n-      if (syncValue === \"dropbox\") {\n-        const dropboxExport = new CustomEvent(\"dropboxExport\");\n-        document.dispatchEvent(dropboxExport);\n-      } else if (syncValue === \"webdav\") {\n-        exportdata(); // Hook usage inside custom hook\n-      } else if (syncValue === \"iCloud\") {\n-        const iCloudExport = new CustomEvent(\"iCloudExport\");\n-        document.dispatchEvent(iCloudExport);\n-      } else if (syncValue === \"googledrive\") {\n-        const driveExport = new CustomEvent(\"driveExport\");\n-        document.dispatchEvent(driveExport);\n-      } else if (syncValue === \"onedrive\") {\n-        const onedriveExport = new CustomEvent(\"onedriveExport\");\n-        document.dispatchEvent(onedriveExport);\n-      }\n-      navigate(\"/\");\n-    };\n-  };\n-\n-  return (\n-    <div>\n-      <div\n-        className={`editor overflow-auto h-full justify-center items-start px-4 ${\n-          wd ? \"sm:px-10 md:px-10 lg:px-30\" : \"sm:px-10 md:px-20 lg:px-60\"\n-        } text-black dark:text-[color:var(--selected-dark-text)]`}\n-        onDragOver={(e) => e.preventDefault()}\n-        onDrop={handleDrop}\n-      >\n-        <Toolbar note={note} noteId={note.id} editor={editor} />\n-        <div\n-          className={`sm:hidden bg-white bg-opacity-95 dark:bg-[#232222] fixed inset-x-0 overflow-auto h-auto w-full z-40 no-scrollbar flex justify-between`}\n-        >\n-          <button\n-            className=\"p-2 align-start rounded-md text-white bg-transparent cursor-pointer\"\n-            onClick={goBack}\n-          >\n-            <Icons.ArrowLeftLineIcon className=\"border-none dark:text-[color:var(--selected-dark-text)] text-neutral-800 text-xl w-7 h-7\" />\n-          </button>\n-          <div className=\"flex\">\n-            <button\n-              className=\"p-2 rounded-md text-white bg-transparent cursor-pointer\"\n-              onClick={() => setFocusMode((prevFocusMode) => !prevFocusMode)}\n-            >\n-              <Icons.Focus3LineIcon\n-                className={`border-none ${\n-                  focusMode ? \"text-amber-400\" : \"text-neutral-800\"\n-                } dark:text-[color:var(--selected-dark-text)] text-xl w-7 h-7`}\n-              />\n-            </button>\n-\n-            <button\n-              className=\"p-2 align-end rounded-md text-white bg-transparent cursor-pointer\"\n-              onClick={handleshowFind}\n-              ref={buttonRef}\n-            >\n-              <Icons.Search2LineIcon\n-                className={`border-none ${\n-                  focusMode ? \"hidden\" : \"block\"\n-                } dark:text-[color:var(--selected-dark-text)] text-neutral-800 text-xl w-7 h-7`}\n-              />\n-            </button>\n-          </div>\n-          {/* Portal appears below the button */}\n-          {showFind && (\n-            <div\n-              ref={findRef}\n-              className={`fixed ${showFind ? \"block\" : \"hidden\"}`}\n-              style={{\n-                zIndex: 80,\n-              }}\n-            >\n-              <div className=\"fixed inset-x-0 flex justify-center\">\n-                <div className=\"w-full bg-white px-4 sm:px-10 md:px-20 lg:px-60\">\n-                  <Find editor={editor} setShowFind={setShowFind} />\n-                </div>\n-              </div>\n-            </div>\n-          )}\n-        </div>\n-\n-        <div\n-          contentEditable\n-          onPaste={handleTitlePaste}\n-          suppressContentEditableWarning\n-          onTouchStart={preventKeyboardToggle}\n-          className={`text-3xl font-bold overflow-y-scroll outline-none ${\n-            isPlatform(\"android\") ? \"mt-10 sm:pt-14\" : \"md:pt-14\"\n-          } ${isPlatform(\"ios\") ? \"mt-10 sm:pt-14\" : \"md:pt-14\"}`}\n-          onBlur={handleTitleChange}\n-          onKeyDown={handleKeyDownTitle} // Add onKeyDown to handle Enter key\n-          dangerouslySetInnerHTML={{ __html: note.title }}\n-          ref={titleRef} // Attach ref to title field\n-        />\n-        <div>\n-          <div className=\"py-2 h-full w-full\" id=\"container\">\n-            <EditorContent\n-              onPaste={handlePaste}\n-              editor={editor}\n-              onTouchStart={preventKeyboardToggle}\n-              className=\"prose dark:text-neutral-100 max-w-none prose-indigo mb-12\"\n-            />\n-          </div>\n-        </div>\n-\n-        <div className={`${focusMode ? \"hidden\" : \"block\"} sm:hidden`}>\n-          <Drawer noteId={note.id} note={note} editor={editor} />\n-        </div>\n-      </div>\n-    </div>\n-  );\n-}\n-\n-export default EditorComponent;\n"
                },
                {
                    "date": 1731752244323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -483,8 +483,9 @@\n   };\n \n   const goBack = () => {\n     const { exportdata } = useExportDav();\n+    const navigate = useNavigate();\n   \n     return () => {\n       const syncValue = localStorage.getItem(\"sync\");\n   \n"
                },
                {
                    "date": 1731752281258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,9 @@\n   );\n   const [previousContent, setPreviousContent] = useState<JSONContent | null>(\n     null\n   );\n+  const { exportdata } = useExportDav();\n   const [searchQuery] = useState<string>(\"\");\n   const [filteredNotes, setFilteredNotes] =\n     useState<Record<string, Note>>(notesState);\n   const [sortingOption] = useState(\"updatedAt\");\n"
                },
                {
                    "date": 1731752286406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -483,10 +483,8 @@\n     }\n   };\n \n   const goBack = () => {\n-    const { exportdata } = useExportDav();\n-    const navigate = useNavigate();\n   \n     return () => {\n       const syncValue = localStorage.getItem(\"sync\");\n   \n"
                },
                {
                    "date": 1731752309628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -483,9 +483,8 @@\n     }\n   };\n \n   const goBack = () => {\n-  \n     return () => {\n       const syncValue = localStorage.getItem(\"sync\");\n   \n       if (syncValue === \"dropbox\") {\n"
                },
                {
                    "date": 1731752336108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -483,16 +483,16 @@\n     }\n   };\n \n   const goBack = () => {\n-    return () => {\n-      const syncValue = localStorage.getItem(\"sync\");\n-  \n+    const syncValue = localStorage.getItem(\"sync\");\n+\n+    try {\n       if (syncValue === \"dropbox\") {\n         const dropboxExport = new CustomEvent(\"dropboxExport\");\n         document.dispatchEvent(dropboxExport);\n       } else if (syncValue === \"webdav\") {\n-        exportdata(); // Hook usage inside custom hook\n+        exportdata(); // Safe hook usage\n       } else if (syncValue === \"iCloud\") {\n         const iCloudExport = new CustomEvent(\"iCloudExport\");\n         document.dispatchEvent(iCloudExport);\n       } else if (syncValue === \"googledrive\") {\n@@ -501,10 +501,13 @@\n       } else if (syncValue === \"onedrive\") {\n         const onedriveExport = new CustomEvent(\"onedriveExport\");\n         document.dispatchEvent(onedriveExport);\n       }\n-      navigate(\"/\");\n-    };\n+    } catch (error) {\n+      console.error(\"An error occurred during export:\", error);\n+    } finally {\n+      navigate(\"/\"); // Always navigate back, even if an error occurs\n+    }\n   };\n \n   return (\n     <div>\n"
                }
            ],
            "date": 1731752087686,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Note } from \"../../store/types\";\nimport { EditorContent, useEditor, JSONContent } from \"@tiptap/react\";\nimport Toolbar from \"./Toolbar\";\nimport { isPlatform } from \"@ionic/react\";\nimport Drawer from \"./Drawer\";\nimport Find from \"./Find\";\nimport \"../../assets/css/editor.css\";\nimport extensions from \"../../lib/tiptap/index\";\nimport EditorSuggestion from \"../../lib/tiptap/exts/suggestions/EditorSuggestion\";\nimport NoteLinkExtension from \"../../lib/tiptap/exts/suggestions/NoteLinkSuggestion\";\nimport NoteLabelSuggestion from \"../../lib/tiptap/exts/suggestions/NoteLabelSuggestion\";\nimport DOMPurify from \"dompurify\";\nimport useNoteEditor from \"../../store/useNoteActions\";\nimport { useNotesState } from \"../../store/Activenote\";\nimport Icons from \"../../lib/remixicon-react\";\nimport Mousetrap from \"mousetrap\";\nimport getMimeType from \"../../utils/mimetype\";\nimport { saveImageToFileSystem } from \"../../utils/fileHandler\";\nimport { saveFileToFileSystem } from \"../../utils/fileHandler\";\nimport { useExportDav } from \"../../utils/Webdav/webDavUtil\";\n\ntype Props = {\n  note: Note;\n  notesState: Record<string, Note>;\n  setNotesState: (notes: Record<string, Note>) => void;\n};\n\nfunction EditorComponent({ note, notesState, setNotesState }: Props) {\n  const { activeNoteId, setActiveNoteId } = useNotesState();\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n  const findRef = useRef<HTMLDivElement | null>(null);\n  const { title, handleChangeNoteContent } = useNoteEditor(\n    activeNoteId,\n    notesState,\n    setNotesState\n  );\n  const [previousContent, setPreviousContent] = useState<JSONContent | null>(\n    null\n  );\n  const [searchQuery] = useState<string>(\"\");\n  const [filteredNotes, setFilteredNotes] =\n    useState<Record<string, Note>>(notesState);\n  const [sortingOption] = useState(\"updatedAt\");\n\n  useEffect(() => {\n    const filtered = Object.values(notesState).filter((note) => {\n      const titleMatch = note.title\n        .toLowerCase()\n        .includes(searchQuery.toLowerCase());\n      return titleMatch;\n    });\n\n    setFilteredNotes(\n      Object.fromEntries(filtered.map((note) => [note.id, note]))\n    );\n  }, [searchQuery, notesState]);\n\n  const notesList = Object.values(filteredNotes).sort((a, b) => {\n    switch (sortingOption) {\n      case \"alphabetical\":\n        return a.title.localeCompare(b.title);\n      case \"createdAt\":\n        const createdAtA = typeof a.createdAt === \"number\" ? a.createdAt : 0;\n        const createdAtB = typeof b.createdAt === \"number\" ? b.createdAt : 0;\n        return createdAtA - createdAtB;\n      case \"updatedAt\":\n      default:\n        const updatedAtA = typeof a.updatedAt === \"number\" ? a.updatedAt : 0;\n        const updatedAtB = typeof b.updatedAt === \"number\" ? b.updatedAt : 0;\n        return updatedAtA - updatedAtB;\n    }\n  });\n\n  const [focusMode, setFocusMode] = useState(false);\n  const [showFind, setShowFind] = useState(false);\n  const [wd, setWd] = useState<boolean>(\n    localStorage.getItem(\"expand-editor\") === \"true\"\n  );\n  const navigate = useNavigate();\n\n  const titleRef = useRef<HTMLDivElement>(null);\n  const editorRef = useRef<any>(null);\n\n  useEffect(() => {\n    setActiveNoteId(note.id);\n  }, [note.id, setActiveNoteId]);\n\n  const uniqueLabels = Array.from(\n    new Set(Object.values(notesState).flatMap((note) => note.labels))\n  );\n\n  document.addEventListener(\"updateLabel\", (event: Event) => {\n    const customEvent = event as CustomEvent;\n    const labelToAdd = customEvent.detail.props;\n\n    // Ensure existingLabels is initialized correctly\n    const existingLabels = note.labels || [];\n\n    // Check if the label already exists\n    const labelExists = existingLabels.includes(labelToAdd);\n\n    // Only add the label if it doesn't already exist\n    const updatedLabels = labelExists\n      ? existingLabels\n      : [...existingLabels, labelToAdd];\n\n    const jsonContent = editor?.getJSON() || {};\n\n    // Update the note content with the new list of labels\n    handleChangeNoteContent(jsonContent, note.title, updatedLabels);\n  });\n\n  const exts = [\n    ...extensions,\n    NoteLinkExtension.configure({\n      notes: notesList,\n    }),\n    NoteLabelSuggestion.configure({\n      uniqueLabels: uniqueLabels,\n    }),\n    EditorSuggestion.configure({\n      noteId: note.id,\n    }),\n  ];\n\n  const editor = useEditor(\n    {\n      extensions: exts,\n      content: note.content,\n      onUpdate: ({ editor }) => {\n        const editorContent = editor.getJSON();\n\n        // Handle note content change\n        handleChangeNoteContent(editorContent || {}, title);\n\n        // Compare previous and current content\n        if (previousContent) {\n          const previousLabels = findNoteLabels(previousContent);\n          const currentLabels = findNoteLabels(editorContent);\n\n          // Check for deleted labels\n          previousLabels.forEach((label) => {\n            if (\n              !currentLabels.some(\n                (currentLabel) => currentLabel.attrs.id === label.attrs.id\n              )\n            ) {\n              console.log(`Label deleted: ${label.attrs.label}`);\n\n              // Remove the deleted label from the labels array\n              const updatedLabels = note.labels.filter(\n                (noteLabel) => noteLabel !== label.attrs.label\n              );\n\n              // Update the note content with the new labels\n              handleChangeNoteContent(editorContent, note.title, updatedLabels);\n            }\n          });\n        }\n\n        // Update previous content\n        setPreviousContent(editorContent);\n      },\n    },\n    [note.id]\n  );\n\n  useEffect(() => {\n    if (editor) {\n      editor.commands.focus();\n      editorRef.current = editor; // Store editor in ref\n    }\n  }, [editor]);\n\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      if (event.key === \"f\" && (event.metaKey || event.ctrlKey)) {\n        event.preventDefault();\n        setShowFind(true);\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyPress);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, []);\n\n  document.addEventListener(\"showFind\", () => {\n    setShowFind((prevShowFind) => !prevShowFind);\n  });\n\n  useEffect(() => {\n    setWd(localStorage.getItem(\"expand-editor\") === \"true\");\n  }, []);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLDivElement>) => {\n    const newTitle = DOMPurify.sanitize(event.currentTarget.innerHTML);\n    handleChangeNoteContent(editor?.getJSON() || {}, newTitle);\n  };\n\n  const handleTitlePaste = (event: React.ClipboardEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    const text = event.clipboardData.getData(\"text/plain\");\n    document.execCommand(\"insertText\", false, text);\n  };\n\n  // Utility function to find all noteLabel objects in the JSON content\n  const findNoteLabels = (content: JSONContent) => {\n    const labels: any[] = [];\n    const traverse = (node: any) => {\n      if (node.type === \"noteLabel\") {\n        labels.push(node);\n      }\n      if (node.content) {\n        node.content.forEach(traverse);\n      }\n    };\n    traverse(content);\n    return labels;\n  };\n\n  const handleshowFind = () => {\n    if (buttonRef.current) {\n      setShowFind(true);\n    }\n  };\n\n  const handleKeyDownTitle = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      editorRef.current?.commands.focus(); // Focus the editor\n    }\n  };\n\n  const preventKeyboardToggle = (event: any) => {\n    event.preventDefault();\n  };\n\n  const setLink = useCallback(() => {\n    const previousUrl = editor?.getAttributes(\"link\").href;\n    const url = window.prompt(\"URL\", previousUrl);\n\n    // cancelled\n    if (url === null) {\n      return;\n    }\n\n    // empty\n    if (url === \"\") {\n      editor?.chain().focus().extendMarkRange(\"link\").unsetLink().run();\n\n      return;\n    }\n\n    // update link\n    editor\n      ?.chain()\n      .focus()\n      .extendMarkRange(\"link\")\n      .setLink({ href: url })\n      .run();\n  }, [editor]);\n\n  useEffect(() => {\n    // Mousetrap key bindings\n    Mousetrap.bind(\"mod+k\", (e) => {\n      e.preventDefault();\n      setLink();\n    });\n    Mousetrap.bind(\"mod+shift+x\", (e) => {\n      e.preventDefault();\n      editor?.chain().focus().toggleStrike().run();\n    });\n    Mousetrap.bind(\"mod+shift+h\", (e) => {\n      e.preventDefault();\n      editor?.chain().focus().setHighlight({color: \"bg-yellow-200 dark:bg-yellow-100\"}).run();\n    });\n    Mousetrap.bind(\"mod+.\", (e) => {\n      e.preventDefault();\n      editor?.commands.toggleSuperscript();\n    });\n    Mousetrap.bind(\"alt+,\", (e) => {\n      e.preventDefault();\n      editor?.commands.toggleSubscript();\n    });\n    Mousetrap.bind(\"mod+e\", (e) => {\n      e.preventDefault();\n      editor?.chain().focus().toggleCode().run();\n    });\n    Mousetrap.bind(\"alt+1\", (e) => {\n      e.preventDefault();\n      editor?.chain().focus().toggleHeading({ level: 1 }).run();\n    });\n    Mousetrap.bind(\"alt+2\", (e) => {\n      e.preventDefault();\n      editor?.chain().focus().toggleHeading({ level: 2 }).run();\n    });\n    Mousetrap.bind(\"alt+3\", (e) => {\n      e.preventDefault();\n      editor?.chain().focus().toggleHeading({ level: 3 }).run();\n    });\n    Mousetrap.bind(\"alt+4\", (e) => {\n      e.preventDefault();\n      editor?.chain().focus().toggleHeading({ level: 4 }).run();\n    });\n    Mousetrap.bind(\"alt+5\", (e) => {\n      e.preventDefault();\n      editor?.chain().focus().toggleHeading({ level: 5 }).run();\n    });\n    Mousetrap.bind(\"alt+6\", (e) => {\n      e.preventDefault();\n      editor?.chain().focus().toggleHeading({ level: 6 }).run();\n    });\n    Mousetrap.bind(\"mod+shift+7\", (e) => {\n      e.preventDefault();\n      editor?.chain().focus().toggleOrderedList().run();\n    });\n    Mousetrap.bind(\"mod+shift+8\", (e) => {\n      e.preventDefault();\n      editor?.chain().focus().toggleBulletList().run();\n    });\n    Mousetrap.bind(\"mod+shift+b\", (e) => {\n      e.preventDefault();\n      editor?.chain().focus().toggleBlockquote().run();\n    });\n    Mousetrap.bind(\"mod+alt+c\", (e) => {\n      e.preventDefault();\n      editor?.chain().focus().toggleCodeBlock().run();\n    });\n\n    // Cleanup all key bindings on unmount\n    return () => {\n      Mousetrap.unbind(\"mod+k\");\n      Mousetrap.unbind(\"mod+shift+x\");\n      Mousetrap.unbind(\"mod+shift+h\");\n      Mousetrap.unbind(\"mod+.\");\n      Mousetrap.unbind(\"alt+,\");\n      Mousetrap.unbind(\"mod+e\");\n      Mousetrap.unbind(\"alt+1\");\n      Mousetrap.unbind(\"alt+2\");\n      Mousetrap.unbind(\"alt+3\");\n      Mousetrap.unbind(\"alt+4\");\n      Mousetrap.unbind(\"alt+5\");\n      Mousetrap.unbind(\"alt+6\");\n      Mousetrap.unbind(\"mod+shift+7\");\n      Mousetrap.unbind(\"mod+shift+8\");\n      Mousetrap.unbind(\"mod+shift+b\");\n      Mousetrap.unbind(\"mod+alt+c\");\n    };\n  }, [editor, setLink]);\n\n  const handleDrop = async (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    const items = event.dataTransfer.items;\n    await processItems(items);\n  };\n\n  const handlePaste = async (event: React.ClipboardEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const items = event.clipboardData.items;\n    document.execCommand(\"insertText\", false, \" \"); // Add space before pasting\n\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n\n      if (item.kind === \"file\") {\n        // Handle pasted file (like from file manager)\n        const file = item.getAsFile();\n        if (file) {\n          await handleFileByType(file); // Handle file processing as usual\n        }\n      } else if (item.kind === \"string\" && item.type === \"text/html\") {\n        // Handle HTML content (like pasting from a web page)\n        item.getAsString(async (htmlContent: string) => {\n          const imageUrl = extractImageUrlFromHtml(htmlContent);\n          if (imageUrl) {\n            editor?.chain().setImage({ src: imageUrl }).run(); // Insert image from URL\n          } else {\n            // If no image URL, fallback to pasting the content as plain HTML/text\n            editor?.chain().insertContent(htmlContent).run();\n          }\n        });\n      } else if (item.kind === \"string\" && item.type === \"text/plain\") {\n        // Handle plain text or URLs\n        item.getAsString(async (textContent: string) => {\n          if (isBase64Image(textContent)) {\n            // If the content is a base64 image, insert it directly\n            editor?.chain().setImage({ src: textContent }).run();\n          } else if (isValidUrl(textContent)) {\n            // If it's a valid URL, check if it's an image URL\n            if (isImageUrl(textContent)) {\n              editor?.chain().setImage({ src: textContent }).run(); // Insert image\n            } else {\n              // If it's not an image URL, insert it as plain text or link\n              editor?.chain().insertContent(textContent).run();\n            }\n          } else {\n            // If neither base64 nor a valid URL, insert it as plain text\n            editor?.chain().insertContent(textContent).run();\n          }\n        });\n      }\n    }\n  };\n\n  // Helper to check if the pasted content is a base64 image\n  const isBase64Image = (str: string): boolean => {\n    return str.startsWith(\"data:image/\") && str.includes(\"base64,\");\n  };\n\n  // Helper to extract image URL from pasted HTML content\n  const extractImageUrlFromHtml = (htmlContent: string): string | null => {\n    const tempDiv = document.createElement(\"div\");\n    tempDiv.innerHTML = htmlContent;\n    const imgTag = tempDiv.querySelector(\"img\");\n\n    return imgTag ? imgTag.src : null;\n  };\n\n  // Helper to validate if a string is a valid URL\n  const isValidUrl = (string: string): boolean => {\n    try {\n      new URL(string);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  };\n\n  // Helper to check if a URL is an image URL (jpg, png, gif, etc.)\n  const isImageUrl = (url: string): boolean => {\n    const imagePattern = /\\.(jpeg|jpg|gif|png|bmp|webp)$/i;\n    return imagePattern.test(url);\n  };\n\n  const processItems = async (items: DataTransferItemList) => {\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      if (item.kind === \"file\") {\n        const file = item.getAsFile();\n        if (file) {\n          const fileType = getMimeType(file.name);\n          if (fileType) {\n            await handleFileByType(file);\n          } else {\n            console.warn(`Unsupported file type: ${file.type}`);\n          }\n        }\n      }\n    }\n  };\n\n  const handleFileByType = async (file: File) => {\n    try {\n      let fileUrl = \"\",\n        fileName = \"\";\n      const mimeType = file.type;\n\n      if (mimeType.startsWith(\"image/\")) {\n        const { imageUrl } = await saveImageToFileSystem(file, note.id);\n        editor?.chain().setImage({ src: imageUrl }).run();\n      } else if (mimeType.startsWith(\"video/\")) {\n        ({ fileUrl, fileName } = await saveFileToFileSystem(file, note.id));\n        //@ts-ignore\n        editor?.chain().setVideo({ src: fileUrl }).run();\n      } else if (mimeType.startsWith(\"audio/\")) {\n        ({ fileUrl, fileName } = await saveFileToFileSystem(file, note.id));\n        //@ts-ignore\n        editor?.chain().setAudio({ src: fileUrl }).run();\n      } else {\n        ({ fileUrl, fileName } = await saveFileToFileSystem(file, note.id));\n        //@ts-ignore\n        editor?.chain().setFileEmbed(fileUrl, fileName).run();\n      }\n    } catch (error) {\n      console.error(`Error handling file: ${file.name}`, error);\n    }\n  };\n\n  const goBack = () => {\n    const handleSync = () => {\n      const syncValue = localStorage.getItem(\"sync\");\n  \n      if (syncValue === \"dropbox\") {\n        const dropboxImport = new CustomEvent(\"dropboxImport\");\n        document.dispatchEvent(dropboxImport);\n      } else if (syncValue === \"webdav\") {\n        HandleImportData(); // now safely called\n      } else if (syncValue === \"iCloud\") {\n        const iCloudImport = new CustomEvent(\"iCloudImport\");\n        document.dispatchEvent(iCloudImport);\n      } else if (syncValue === \"googledrive\") {\n        const driveImport = new CustomEvent(\"driveImport\");\n        document.dispatchEvent(driveImport);\n      } else if (syncValue === \"onedrive\") {\n        const onedriveImport = new CustomEvent(\"onedriveImport\");\n        document.dispatchEvent(onedriveImport);\n      }\n    };\n    \n    navigate(\"/\");\n    handleSync();\n  }, [HandleImportData]);\n\n  return (\n    <div>\n      <div\n        className={`editor overflow-auto h-full justify-center items-start px-4 ${\n          wd ? \"sm:px-10 md:px-10 lg:px-30\" : \"sm:px-10 md:px-20 lg:px-60\"\n        } text-black dark:text-[color:var(--selected-dark-text)]`}\n        onDragOver={(e) => e.preventDefault()}\n        onDrop={handleDrop}\n      >\n        <Toolbar note={note} noteId={note.id} editor={editor} />\n        <div\n          className={`sm:hidden bg-white bg-opacity-95 dark:bg-[#232222] fixed inset-x-0 overflow-auto h-auto w-full z-40 no-scrollbar flex justify-between`}\n        >\n          <button\n            className=\"p-2 align-start rounded-md text-white bg-transparent cursor-pointer\"\n            onClick={goBack}\n          >\n            <Icons.ArrowLeftLineIcon className=\"border-none dark:text-[color:var(--selected-dark-text)] text-neutral-800 text-xl w-7 h-7\" />\n          </button>\n          <div className=\"flex\">\n            <button\n              className=\"p-2 rounded-md text-white bg-transparent cursor-pointer\"\n              onClick={() => setFocusMode((prevFocusMode) => !prevFocusMode)}\n            >\n              <Icons.Focus3LineIcon\n                className={`border-none ${\n                  focusMode ? \"text-amber-400\" : \"text-neutral-800\"\n                } dark:text-[color:var(--selected-dark-text)] text-xl w-7 h-7`}\n              />\n            </button>\n\n            <button\n              className=\"p-2 align-end rounded-md text-white bg-transparent cursor-pointer\"\n              onClick={handleshowFind}\n              ref={buttonRef}\n            >\n              <Icons.Search2LineIcon\n                className={`border-none ${\n                  focusMode ? \"hidden\" : \"block\"\n                } dark:text-[color:var(--selected-dark-text)] text-neutral-800 text-xl w-7 h-7`}\n              />\n            </button>\n          </div>\n          {/* Portal appears below the button */}\n          {showFind && (\n            <div\n              ref={findRef}\n              className={`fixed ${showFind ? \"block\" : \"hidden\"}`}\n              style={{\n                zIndex: 80,\n              }}\n            >\n              <div className=\"fixed inset-x-0 flex justify-center\">\n                <div className=\"w-full bg-white px-4 sm:px-10 md:px-20 lg:px-60\">\n                  <Find editor={editor} setShowFind={setShowFind} />\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div\n          contentEditable\n          onPaste={handleTitlePaste}\n          suppressContentEditableWarning\n          onTouchStart={preventKeyboardToggle}\n          className={`text-3xl font-bold overflow-y-scroll outline-none ${\n            isPlatform(\"android\") ? \"mt-10 sm:pt-14\" : \"md:pt-14\"\n          } ${isPlatform(\"ios\") ? \"mt-10 sm:pt-14\" : \"md:pt-14\"}`}\n          onBlur={handleTitleChange}\n          onKeyDown={handleKeyDownTitle} // Add onKeyDown to handle Enter key\n          dangerouslySetInnerHTML={{ __html: note.title }}\n          ref={titleRef} // Attach ref to title field\n        />\n        <div>\n          <div className=\"py-2 h-full w-full\" id=\"container\">\n            <EditorContent\n              onPaste={handlePaste}\n              editor={editor}\n              onTouchStart={preventKeyboardToggle}\n              className=\"prose dark:text-neutral-100 max-w-none prose-indigo mb-12\"\n            />\n          </div>\n        </div>\n\n        <div className={`${focusMode ? \"hidden\" : \"block\"} sm:hidden`}>\n          <Drawer noteId={note.id} note={note} editor={editor} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default EditorComponent;\n"
        }
    ]
}