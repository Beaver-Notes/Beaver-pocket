{
    "sourceFile": "src/components/Editor/VideoUpload.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1732521668005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1732521668005,
            "name": "Commit-0",
            "content": "import React from \"react\";\nimport { Plugins } from \"@capacitor/core\";\nimport { Directory, FilesystemDirectory } from \"@capacitor/filesystem\";\nimport icons from \"../../lib/remixicon-react\";\n\nconst { Filesystem } = Plugins;\n\ninterface FileUploadProps {\n  onVideoUpload: (fileUrl: string) => void;\n  noteId: string;\n  menu?: boolean;\n  translations?: any;\n}\n\nconst VideoUploadComponent: React.FC<FileUploadProps> = ({\n  onVideoUpload,\n  noteId,\n  menu,\n  translations,\n}) => {\n  const handleVideoInputChange = async (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const file = event.target.files && event.target.files[0];\n    if (file) {\n      const { fileUrl } = await saveFileToFileSystem(file);\n      onVideoUpload(fileUrl);\n    }\n  };\n\n  async function createDirectory() {\n    const directoryPath = `file-assets/${noteId}`;\n\n    try {\n      await Filesystem.mkdir({\n        path: directoryPath,\n        directory: Directory.Data,\n        recursive: true,\n      });\n    } catch (error: unknown) {\n      console.error(\"Error creating the directory:\", error);\n    }\n  }\n\n  const saveFileToFileSystem = async (\n    file: File\n  ): Promise<{ fileUrl: string; fileName: string }> => {\n    try {\n      await createDirectory();\n      const fileName = `${Date.now()}_${file.name}`;\n\n      // Read file contents as data URL\n      const fileReader = new FileReader();\n      fileReader.readAsDataURL(file);\n\n      return new Promise((resolve, reject) => {\n        fileReader.onload = async () => {\n          const fileDataUrl = fileReader.result as string;\n\n          // Write file to filesystem under \"note-assets/noteId\" directory\n          const filePath = `file-assets/${noteId}/${fileName}`;\n          await Filesystem.writeFile({\n            path: filePath,\n            data: fileDataUrl, // Write the data URL instead of the file object\n            directory: FilesystemDirectory.Data,\n            recursive: true,\n          });\n\n          resolve({ fileUrl: filePath, fileName: file.name });\n        };\n\n        fileReader.onerror = (error) => {\n          reject(error);\n        };\n      });\n    } catch (error) {\n      console.error(\"Error saving file to file system:\", error);\n      return { fileUrl: \"\", fileName: \"\" };\n    }\n  };\n\n  return (\n    <div>\n      {/* Conditionally render content based on `menu` value */}\n      {menu ? (\n        <div className=\"flex items-center p-2 rounded-lg text-black dark:text-[color:var(--selected-dark-text)] cursor-pointer hover:bg-neutral-100 dark:hover:bg-[#353333] transition duration-200\">\n          <button\n            onClick={() => {\n              const inputElement = document.getElementById(\n                \"video-upload-input\"\n              ) as HTMLInputElement | null;\n              if (inputElement) {\n                inputElement.click(); // Safely click the input element\n              }\n            }}\n            className=\"flex items-center\"\n            aria-label={translations.menuItems.videoLabel} // Aria label for screen readers\n          >\n            {/* Icon */}\n            <icons.VideoIcon\n              className=\"text-black dark:text-[color:var(--selected-dark-text)] text-xl w-8 h-8 mr-3\"\n              aria-hidden=\"true\" // This icon doesn't need to be announced by screen readers\n            />\n\n            {/* Text Container */}\n            <div className=\"flex flex-col text-left\">\n              <h3 className=\"font-medium text-neutral-900 dark:text-[color:var(--selected-dark-text)]\">\n                {translations.menuItems.videoLabel}\n              </h3>\n            </div>\n          </button>\n\n          {/* Hidden File Input */}\n          <input\n            type=\"file\"\n            onChange={handleVideoInputChange}\n            id=\"video-upload-input\"\n            className=\"hidden\"\n            aria-label={translations.accessibility.uploadVideo} // Accessibility label for file input\n          />\n        </div>\n      ) : (\n        <div className=\"flex items-center justify-between sm:p-2 p-1 rounded-md sm:text-white bg-transparent cursor-pointer text-neutral-700 dark:text-[color:var(--selected-dark-text)]\">\n          <button\n            onClick={() => {\n              const inputElement = document.getElementById(\n                \"video-upload-input\"\n              ) as HTMLInputElement | null;\n              if (inputElement) {\n                inputElement.click(); // Safely click the input element\n              }\n            }}\n            aria-label={translations.accessibility.uploadVideo} // Accessibility label for the button\n          >\n            <icons.VideoIcon\n              className=\"sm:text-white text-xl sm:w-7 sm:h-7 border-none dark:text-[color:var(--selected-dark-text)] text-xl w-8 h-8\"\n              aria-hidden=\"true\"\n            />\n          </button>\n          <input\n            type=\"file\"\n            onChange={handleVideoInputChange}\n            id=\"video-upload-input\"\n            className=\"hidden\"\n            aria-label={translations.accessibility.uploadVideo} // Accessibility label for file input\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default VideoUploadComponent;\n"
        }
    ]
}