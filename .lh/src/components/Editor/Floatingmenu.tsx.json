{
    "sourceFile": "src/components/Editor/Floatingmenu.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1732521475006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1732521475006,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState } from \"react\";\nimport icons from \"../../lib/remixicon-react\";\nimport FileUploadComponent from \"./FileUpload\";\nimport VideoUploadComponent from \"./VideoUpload\";\nimport ImageUploadComponent from \"./ImageUpload\";\n\ninterface FloatingMenuProps {\n  editor: any;\n  noteId: string;\n  command: (fn: () => void) => void;\n}\n\nconst FloatingMenuComponent: React.FC<FloatingMenuProps> = ({\n  editor,\n  noteId,\n  command,\n}) => {\n  const ref = useRef<HTMLDivElement | null>(null);\n  const [translations, setTranslations] = useState({\n    editor: {\n      embedUrl: \"editor.embedUrl\",\n    },\n    menuItems: {\n      fileLabel: \"menuItems.fileLabel\",\n      imageLabel: \"menuItems.imageLabel\",\n      imageDescription: \"menuItems.imageDescription\",\n      videoLabel: \"menuItems.videoLabel\",\n      videoDescription: \"menuItems.videoDescription\",\n      paragraphLabel: \"menuItems.paragraphLabel\",\n      paragraphDescription: \"menuItems.paragraphDescription\",\n      heading1Label: \"menuItems.heading1Label\",\n      heading1Description: \"menuItems.heading1Description\",\n      heading2Label: \"menuItems.heading2Label\",\n      heading2Description: \"menuItems.heading2Description\",\n      heading3Label: \"menuItems.heading3Label\",\n      heading3Description: \"menuItems.heading3Description\",\n      heading4Label: \"menuItems.heading4Label\",\n      heading4Description: \"menuItems.heading4Description\",\n      heading5Label: \"menuItems.heading5Label\",\n      heading5Description: \"menuItems.heading5Description\",\n      heading6Label: \"menuItems.heading6Label\",\n      heading6Description: \"menuItems.heading6Description\",\n      quoteLabel: \"menuItems.quoteLabel\",\n      quoteDescription: \"menuItems.quoteDescription\",\n      codeLabel: \"menuItems.codeLabel\",\n      codeDescription: \"menuItems.codeDescription\",\n      tableLabel: \"menuItems.tableLabel\",\n      tableDescription: \"menuItems.tableDescription\",\n      bulletListLabel: \"menuItems.bulletListLabel\",\n      bulletListDescription: \"menuItems.bulletListDescription\",\n      orderedListLabel: \"menuItems.orderedListLabel\",\n      orderedListDescription: \"menuItems.orderedListDescription\",\n      checklistLabel: \"menuItems.checklistLabel\",\n      checklistDescription: \"menuItems.checklistDescription\",\n      blackCalloutLabel: \"menuItems.blackCalloutLabel\",\n      blackCalloutDescription: \"menuItems.blackCalloutDescription\",\n      blueCalloutLabel: \"menuItems.blueCalloutLabel\",\n      blueCalloutDescription: \"menuItems.blueCalloutDescription\",\n      greenCalloutLabel: \"menuItems.greenCalloutLabel\",\n      greenCalloutDescription: \"menuItems.greenCalloutDescription\",\n      purpleCalloutLabel: \"menuItems.purpleCalloutLabel\",\n      purpleCalloutDescription: \"menuItems.purpleCalloutDescription\",\n      redCalloutLabel: \"menuItems.redCalloutLabel\",\n      redCalloutDescription: \"menuItems.redCalloutDescription\",\n      yellowCalloutLabel: \"menuItems.yellowCalloutLabel\",\n      yellowCalloutDescription: \"menuItems.yellowCalloutDescription\",\n      mathBlockLabel: \"menuItems.mathBlockLabel\",\n      mathBlockDescription: \"menuItems.mathBlockDescription\",\n      mermaidBlockLabel: \"menuItems.mermaidBlockLabel\",\n      mermaidBlockDescription: \"menuItems.mermaidBlockDescription\",\n      embedLabel: \"menuItems.embedLabel\",\n      embedDescription: \"menuItems.embedDescription\",\n      drawingBlockLabel: \"menuItems.drawingBlockLabel\",\n      drawingBlockDescription: \"menuItems.drawingBlockDescription\",\n    },\n  });\n\n  useEffect(() => {\n    const loadTranslations = async () => {\n      const selectedLanguage = localStorage.getItem(\"selectedLanguage\") || \"en\";\n      try {\n        const translationModule = await import(\n          `../../assets/locales/${selectedLanguage}.json`\n        );\n        setTranslations((prev) => ({ ...prev, ...translationModule.default }));\n      } catch (error) {\n        console.error(\"Error loading translations:\", error);\n      }\n    };\n\n    loadTranslations();\n  }, []);\n\n  const handleAddIframe = () => {\n    command(() => {\n      const videoUrl = prompt(`${translations.editor.embedUrl}`);\n      if (!videoUrl || videoUrl.trim() === \"\") {\n        return;\n      }\n\n      let formattedUrl = videoUrl.trim();\n      if (formattedUrl.includes(\"youtube.com/watch?v=\")) {\n        let videoId = formattedUrl.split(\"v=\")[1];\n        const ampersandPosition = videoId.indexOf(\"&\");\n        if (ampersandPosition !== -1) {\n          videoId = videoId.substring(0, ampersandPosition);\n        }\n        formattedUrl = `https://www.youtube.com/embed/${videoId}`;\n      } else if (formattedUrl.includes(\"youtu.be/\")) {\n        let videoId = formattedUrl.split(\"youtu.be/\")[1];\n        const ampersandPosition = videoId.indexOf(\"?\");\n        if (ampersandPosition !== -1) {\n          videoId = videoId.substring(0, ampersandPosition);\n        }\n        formattedUrl = `https://www.youtube.com/embed/${videoId}`;\n      }\n\n      editor?.chain().focus().setIframe({ src: formattedUrl }).run();\n    });\n  };\n\n  const handlefileUpload = (fileUrl: string, fileName: string) => {\n    command(() => {\n      editor?.chain().setFileEmbed(fileUrl, fileName).run();\n    });\n  };\n\n  const handlevideoUpload = (fileUrl: string) => {\n    command(() => {\n      editor?.chain().setVideo(fileUrl).run();\n    });\n  };\n\n  const handleImageUpload = (imageUrl: string) => {\n    command(() => {\n      editor?.chain().setImage({ src: imageUrl }).run();\n    });\n  };\n\n  const menuItems = [\n    {\n      icon: icons.ParagraphIcon,\n      label: translations.menuItems.paragraphLabel,\n      description: translations.menuItems.paragraphDescription,\n      action: () => command(() => editor.chain().focus().setParagraph().run()),\n    },\n    {\n      icon: icons.Heading1Icon,\n      label: translations.menuItems.heading1Label,\n      description: translations.menuItems.heading1Description,\n      action: () => command(() => editor?.chain().focus().toggleHeading({ level: 1 }).run()),\n    },\n    {\n      icon: icons.Heading2Icon,\n      label: translations.menuItems.heading2Label,\n      description: translations.menuItems.heading2Description,\n      action: () => command(() => editor?.chain().focus().toggleHeading({ level: 2 }).run()),\n    },\n    {\n      icon: icons.Heading3Icon,\n      label: translations.menuItems.heading3Label,\n      description: translations.menuItems.heading3Description,\n      action: () => command(() => editor?.chain().focus().toggleHeading({ level: 3 }).run()),\n    },\n    {\n      icon: icons.Heading4Icon,\n      label: translations.menuItems.heading4Label,\n      description: translations.menuItems.heading4Description,\n      action: () => command(() => editor?.chain().focus().toggleHeading({ level: 4 }).run()),\n    },\n    {\n      icon: icons.Heading5Icon,\n      label: translations.menuItems.heading5Label,\n      description: translations.menuItems.heading5Description,\n      action: () => command(() => editor?.chain().focus().toggleHeading({ level: 5 }).run()),\n    },\n    {\n      icon: icons.Heading6Icon,\n      label: translations.menuItems.heading6Label,\n      description: translations.menuItems.heading6Description,\n      action: () => command(() => editor?.chain().focus().toggleHeading({ level: 6 }).run()),\n    },\n    {\n      icon: icons.DoubleQuotesLIcon,\n      label: translations.menuItems.quoteLabel,\n      description: translations.menuItems.quoteDescription,\n      action: () => command(() => editor?.chain().focus().toggleBlockquote().run()),\n    },\n    {\n      icon: icons.CodeBoxLineIcon,\n      label: translations.menuItems.codeLabel,\n      description: translations.menuItems.codeDescription,\n      action: () => command(() => editor?.chain().focus().toggleCodeBlock().run()),\n    },\n    {\n      icon: icons.Table2Icon,\n      label: translations.menuItems.tableLabel,\n      description: translations.menuItems.tableDescription,\n      action: () => command(() => editor?.commands.insertTable({ rows: 3, cols: 3, withHeaderRow: true })),\n    },\n    {\n      icon: icons.ListUnorderedIcon,\n      label: translations.menuItems.bulletListLabel,\n      description: translations.menuItems.bulletListDescription,\n      action: () => command(() => editor?.chain().focus().toggleBulletList().run()),\n    },\n    {\n      icon: icons.ListOrderedIcon,\n      label: translations.menuItems.orderedListLabel,\n      description: translations.menuItems.orderedListDescription,\n      action: () => command(() => editor?.chain().focus().toggleOrderedList().run()),\n    },\n    {\n      icon: icons.ListCheck2Icon,\n      label: translations.menuItems.checklistLabel,\n      description: translations.menuItems.checklistDescription,\n      action: () => command(() => editor?.chain().focus().toggleTaskList().run()),\n    },\n    {\n      icon: icons.SingleQuotesLIcon,\n      label: translations.menuItems.blackCalloutLabel,\n      description: translations.menuItems.blackCalloutDescription,\n      className: \"dark:text-neutral-400\",\n      action: () => command(() => editor?.chain().focus().setBlackCallout().run()),\n    },\n    {\n      icon: icons.SingleQuotesLIcon,\n      label: translations.menuItems.blueCalloutLabel,\n      description: translations.menuItems.blueCalloutDescription,\n      className: \"text-blue-500 dark:text-blue-500\",\n      action: () => command(() => editor?.chain().focus().setBlueCallout().run()),\n    },\n    {\n      icon: icons.SingleQuotesLIcon,\n      label: translations.menuItems.greenCalloutLabel,\n      description: translations.menuItems.greenCalloutDescription,\n      className: \"text-green-600 dark:text-green-600\",\n      action: () => command(() => editor?.chain().focus().setGreenCallout().run()),\n    },\n    {\n      icon: icons.SingleQuotesLIcon,\n      label: translations.menuItems.purpleCalloutLabel,\n      description: translations.menuItems.purpleCalloutDescription,\n      className: \"text-purple-500 dark:text-purple-500\",\n      action: () => command(() => editor?.chain().focus().setPurpleCallout().run()),\n    },\n    {\n      icon: icons.SingleQuotesLIcon,\n      label: translations.menuItems.redCalloutLabel,\n      description: translations.menuItems.redCalloutDescription,\n      className: \"text-red-500 dark:text-red-500\",\n      action: () => command(() => editor?.chain().focus().setRedCallout().run()),\n    },\n    {\n      icon: icons.SingleQuotesLIcon,\n      label: translations.menuItems.yellowCalloutLabel,\n      description: translations.menuItems.yellowCalloutDescription,\n      className: \"text-yellow-500 dark:text-yellow-500\",\n      action: () => command(() => editor?.chain().focus().setYellowCallout().run()),\n    },\n    {\n      icon: icons.CalculatorLineIcon,\n      label: translations.menuItems.mathBlockLabel,\n      description: translations.menuItems.mathBlockDescription,\n      action: () => command(() => editor?.chain().focus().setMathBlock().run()),\n    },\n    {\n      icon: icons.PieChart2LineIcon,\n      label: translations.menuItems.mermaidBlockLabel,\n      description: translations.menuItems.mermaidBlockDescription,\n      action: () => command(() => editor?.chain().focus().setMermaidDiagram().run()),\n    },\n    {\n      icon: icons.PagesLineIcon,\n      label: translations.menuItems.embedLabel,\n      description: translations.menuItems.embedDescription,\n      action: handleAddIframe,\n    },\n    {\n      icon: icons.BrushLineIcon,\n      label: translations.menuItems.drawingBlockLabel,\n      description: translations.menuItems.drawingBlockDescription,\n      action: () => command(() => editor?.chain().focus().insertPaper().run()),\n    },\n  ];\n\n  return (\n    <div\n      ref={ref}\n      className=\"z-50 fixed bg-white dark:bg-[#232222] rounded-lg shadow-lg border-2 shadow dark:border-neutral-600 p-4\"\n    >\n      <div className=\"max-h-40 overflow-y-auto flex flex-col space-y-2 no-scrollbar\">\n        {menuItems.map((item, index) => (\n          <button\n            key={index}\n            onClick={item.action}\n            className=\"flex items-center p-2 rounded-lg text-black dark:text-[color:var(--selected-dark-text)] cursor-pointer hover:bg-gray-100 dark:hover:bg-[#353333] transition duration-200\"\n          >\n            <item.icon\n              className={`text-black dark:text-[color:var(--selected-dark-text)] text-xl w-8 h-8 mr-2 ${\n                item.className || \"\"\n              }`}\n            />\n            <div className=\"text-left\">\n              <h3 className=\"font-medium text-neutral-800 dark:text-[color:var(--selected-dark-text)]\">\n                {item.label}\n              </h3>\n              <p className=\"text-sm text-neutral-500 dark:text-[color:var(--selected-dark-text)]\">\n                {item.description}\n              </p>\n            </div>\n          </button>\n        ))}\n        <ImageUploadComponent\n          onImageUpload={handleImageUpload}\n          noteId={noteId}\n          menu={true}\n          translations={translations}\n        />\n        <FileUploadComponent\n          onFileUpload={handlefileUpload}\n          noteId={noteId}\n          menu={true}\n          translations={translations}\n        />\n        <VideoUploadComponent\n          onVideoUpload={handlevideoUpload}\n          noteId={noteId}\n          menu={true}\n          translations={translations}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default FloatingMenuComponent;"
        }
    ]
}