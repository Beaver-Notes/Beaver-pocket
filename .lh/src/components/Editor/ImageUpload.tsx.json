{
    "sourceFile": "src/components/Editor/ImageUpload.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1732521657368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1732521657368,
            "name": "Commit-0",
            "content": "import React from \"react\";\nimport { Plugins } from \"@capacitor/core\";\nimport { Directory, FilesystemDirectory } from \"@capacitor/filesystem\";\nimport icons from \"../../lib/remixicon-react\";\n\nconst { Filesystem } = Plugins;\n\ninterface ImageUploadProps {\n  onImageUpload: (imageUrl: string, fileUri: string) => void;\n  noteId: string;\n  menu?: boolean;\n  translations: any;\n}\n\nconst ImageUploadComponent: React.FC<ImageUploadProps> = ({\n  onImageUpload,\n  noteId,\n  translations,\n  menu = false, // default value for the `menu` prop\n}) => {\n  const handleFileChange = async (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const file = event.target.files && event.target.files[0];\n    if (file) {\n      const { imageUrl, fileUri } = await saveImageToFileSystem(file);\n      onImageUpload(imageUrl, fileUri);\n    }\n  };\n\n  async function createDirectory() {\n    const directoryPath = `note-assets/${noteId}`;\n\n    try {\n      await Filesystem.mkdir({\n        path: directoryPath,\n        directory: Directory.Data,\n        recursive: true,\n      });\n    } catch (error: unknown) {\n      console.error(\"Error creating the directory:\", error);\n    }\n  }\n\n  const saveImageToFileSystem = async (\n    file: File\n  ): Promise<{ imageUrl: string; fileUri: string }> => {\n    try {\n      await createDirectory();\n      const fileName = `${Date.now()}_${file.name}`;\n\n      // Read file data as base64 encoded string\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n\n      // Wait for reader to load the file data\n      await new Promise<void>((resolve, reject) => {\n        reader.onload = () => resolve();\n        reader.onerror = () => reject(new Error(\"Error reading file\"));\n      });\n\n      // Get base64 encoded string\n      const base64Data = reader.result as string;\n\n      // Extract the actual base64 data (remove metadata)\n      const base64DataWithoutMetadata = base64Data.split(\",\")[1];\n\n      // Write file to filesystem under \"note-assets/noteId\" directory\n      const filePath = `note-assets/${noteId}/${fileName}`;\n      await Filesystem.writeFile({\n        path: filePath,\n        data: base64DataWithoutMetadata,\n        directory: FilesystemDirectory.Data,\n        recursive: true,\n      });\n\n      // Read the saved file to get its URL\n      const { uri } = await Filesystem.getUri({\n        directory: FilesystemDirectory.Data,\n        path: filePath,\n      });\n\n      console.log(\"upload\", uri);\n\n      return { imageUrl: filePath, fileUri: uri };\n    } catch (error) {\n      console.error(\"Error saving image to file system:\", error);\n      return { imageUrl: \"\", fileUri: \"\" };\n    }\n  };\n\n  // Function to trigger the file input click\n  const triggerFileInput = () => {\n    const inputElement = document.getElementById(\"image-upload-input\") as HTMLInputElement;\n    if (inputElement) {\n      inputElement.click();\n    }\n  };\n\n  return (\n    <div>\n      {/* Conditionally render content based on `menu` value */}\n      {menu ? (\n        <div className=\"flex items-center p-2 rounded-lg text-black dark:text-[color:var(--selected-dark-text)] cursor-pointer hover:bg-neutral-100 dark:hover:bg-[#353333] transition duration-200\">\n          <button\n            onClick={triggerFileInput}\n            className=\"flex items-center cursor-pointer\"\n            aria-label={translations.menuItems.imageLabel}\n          >\n            {/* Icon */}\n            <icons.ImageLineIcon className=\"text-black dark:text-[color:var(--selected-dark-text)] text-xl w-8 h-8 mr-3\" aria-hidden=\"true\" />\n\n            {/* Text Container */}\n            <div className=\"flex flex-col text-left\">\n              <h3 className=\"font-medium text-neutral-900 dark:text-[color:var(--selected-dark-text)]\">\n                {translations.menuItems.imageLabel}\n              </h3>\n            </div>\n          </button>\n\n          {/* Hidden File Input */}\n          <input\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleFileChange}\n            id=\"image-upload-input\"\n            className=\"hidden\"\n          />\n        </div>\n      ) : (\n        // Default image upload component\n        <div className=\"flex items-center justify-between sm:p-2 md:p-2 p-1 rounded-md sm:text-white bg-transparent cursor-pointer text-neutral-700 dark:text-[color:var(--selected-dark-text)]\">\n          <button\n            onClick={triggerFileInput}\n            aria-label={translations.menuItems.imageLabel}\n          >\n            <icons.ImageLineIcon className=\"sm:text-white text-xl border-none dark:text-[color:var(--selected-dark-text)] text-xl w-8 h-8 sm:w-7 md:w-7 sm:h-7 md:h-7 cursor-pointer\" aria-hidden=\"true\" />\n          </button>\n          <input\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleFileChange}\n            id=\"image-upload-input\"\n            className=\"hidden\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ImageUploadComponent;\n"
        }
    ]
}