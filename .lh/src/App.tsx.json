{
    "sourceFile": "src/App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1731752449192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1731752449192,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\nimport { Routes, Route, useNavigate, useLocation } from \"react-router-dom\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport Home from \"./Home\";\nimport Archive from \"./Archive\";\nimport Settings from \"./Settings\";\nimport About from \"./settings/about\";\nimport { App as CapacitorApp } from \"@capacitor/app\";\nimport Shortcuts from \"./settings/shortcuts\";\nimport Welcome from \"./Welcome\";\nimport Dropbox from \"./settings/screens/dropbox\";\nimport Onedrive from \"./settings/screens/onedrive\";\nimport Gdrive from \"./settings/screens/gdrive\";\nimport Webdav from \"./settings/screens/webdav\";\nimport Icloud from \"./settings/screens/icloud\";\nimport { Auth0Provider } from \"@auth0/auth0-react\";\nimport Auth0Config from \"./utils/auth0-config\";\nimport Sync from \"./settings/sync\";\nimport Editor from \"./Editor\";\nimport { useImportDav } from \"./utils/Webdav/webDavUtil\";\nimport \"./assets/css/main.css\";\nimport \"./assets/css/fonts.css\";\nimport BottomNavBar from \"./components/App/BottomNavBar\";\nimport CommandPrompt from \"./components/App/CommandPrompt\";\nimport { loadNotes } from \"./store/notes\";\nimport { useNotesState } from \"./store/Activenote\";\nimport Mousetrap from \"mousetrap\";\nimport { Keyboard, KeyboardResize } from \"@capacitor/keyboard\";\nimport { isPlatform } from \"@ionic/react\";\n\nconst App: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [checkedFirstTime, setCheckedFirstTime] = useState(false);\n  const { notesState, setNotesState } = useNotesState();\n  const [isSwipe, setIsSwipe] = useState(false);\n\n  const isIpad = isPlatform(\"ipad\");\n\n  document.addEventListener(\"reload\", () => {\n    const loadNotesFromStorage = async () => {\n      const notes = await loadNotes();\n      setNotesState(notes);\n    };\n\n    loadNotesFromStorage();\n  });\n\n  document.addEventListener(\"notelink\", (event: Event) => {\n    const customEvent = event as CustomEvent;\n    const noteId = customEvent.detail.noteId;\n    navigate(`/editor/${noteId}`);\n  });\n\n  useEffect(() => {\n    const loadNotesFromStorage = async () => {\n      const notes = await loadNotes();\n      setNotesState(notes);\n    };\n\n    loadNotesFromStorage();\n  }, []);\n\n  // Add back button listener for Android\n  CapacitorApp.addListener(\"backButton\", ({ canGoBack }) => {\n    if (!canGoBack) {\n      CapacitorApp.exitApp();\n    } else {\n      window.history.back();\n    }\n  });\n\n  useEffect(() => {\n    const selectedDarkText =\n      localStorage.getItem(\"selected-dark-text\") || \"white\";\n    document.documentElement.style.setProperty(\n      \"--selected-dark-text\",\n      selectedDarkText\n    );\n  }, []);\n\n  useEffect(() => {\n    if (!checkedFirstTime) {\n      const isFirstTime = localStorage.getItem(\"isFirstTime\");\n      if (isFirstTime === null || isFirstTime === \"true\") {\n        navigate(\"/welcome\");\n        localStorage.setItem(\"isFirstTime\", \"false\");\n      }\n      setCheckedFirstTime(true);\n    }\n  }, [checkedFirstTime, history]);\n\n  const { HandleImportData } = useImportDav(setNotesState);\n\n  useEffect(() => {\n    const handleSync = () => {\n      const syncValue = localStorage.getItem(\"sync\");\n  \n      if (syncValue === \"dropbox\") {\n        const dropboxImport = new CustomEvent(\"dropboxImport\");\n        document.dispatchEvent(dropboxImport);\n      } else if (syncValue === \"webdav\") {\n        HandleImportData(); // now safely called\n      } else if (syncValue === \"iCloud\") {\n        const iCloudImport = new CustomEvent(\"iCloudImport\");\n        document.dispatchEvent(iCloudImport);\n      } else if (syncValue === \"googledrive\") {\n        const driveImport = new CustomEvent(\"driveImport\");\n        document.dispatchEvent(driveImport);\n      } else if (syncValue === \"onedrive\") {\n        const onedriveImport = new CustomEvent(\"onedriveImport\");\n        document.dispatchEvent(onedriveImport);\n      }\n    };\n  \n    handleSync();\n  }, [HandleImportData]);\n\n  const [isCommandPromptOpen, setIsCommandPromptOpen] = useState(false);\n\n  useEffect(() => {\n    // Add back button listener for Android\n    CapacitorApp.addListener(\"backButton\", ({ canGoBack }) => {\n      if (!canGoBack) {\n        CapacitorApp.exitApp(); // Exit app if no history to go back\n      } else {\n        navigate(-1); // Navigate back in the browser history\n      }\n    });\n  \n    return () => {\n      CapacitorApp.removeAllListeners(); // Clean up listeners\n    };\n  }, [navigate]);\n\n  \n  useEffect(() => {\n    Mousetrap.bind(\"mod+shift+p\", (e) => {\n      e.preventDefault();\n      setIsCommandPromptOpen(true);\n    });\n\n    Mousetrap.bind(\"mod+backspace\", (e) => {\n      e.preventDefault();\n      handleEscape();\n    });\n\n    Mousetrap.bind(\"mod+shift+n\", (e) => {\n      e.preventDefault();\n      navigate(\"/\");\n    });\n\n    Mousetrap.bind(\"mod+shift+a\", (e) => {\n      e.preventDefault();\n      navigate(\"/archive\");\n    });\n\n    Mousetrap.bind(\"mod+,\", (e) => {\n      e.preventDefault();\n      navigate(\"/archive\");\n    });\n\n    return () => {\n      Mousetrap.unbind(\"mod+shift+p\");\n      Mousetrap.unbind(\"mod+backspace\");\n      Mousetrap.unbind(\"mod+n\");\n      Mousetrap.unbind(\"mod+shift+n\");\n      Mousetrap.unbind(\"mod+shift+w\");\n      Mousetrap.unbind(\"mod+shift+a\");\n      Mousetrap.unbind(\"mod+,\");\n    };\n  }, []);\n\n  const handleEscape = () => {\n    setIsCommandPromptOpen(false);\n  };\n\n  const shouldShowNavBar = ![\"/welcome\", \"/editor\"].some((path) =>\n    location.pathname.startsWith(path)\n  );\n\n  const [themeMode] = useState(() => {\n    const storedThemeMode = localStorage.getItem(\"themeMode\");\n    return storedThemeMode || \"auto\";\n  });\n\n  const [darkMode] = useState(() => {\n    const prefersDarkMode = window.matchMedia(\n      \"(prefers-color-scheme: dark)\"\n    ).matches;\n    return themeMode === \"auto\" ? prefersDarkMode : themeMode === \"dark\";\n  });\n\n  useEffect(() => {\n    document.documentElement.classList.toggle(\"dark\", darkMode);\n    localStorage.setItem(\"themeMode\", themeMode);\n  }, [darkMode, themeMode]);\n\n  if (isIpad) {\n    Keyboard.setResizeMode({ mode: KeyboardResize.Native });\n  } else {\n    Keyboard.setResizeMode({ mode: KeyboardResize.Native });\n  }\n  return (\n    <div>\n      <div className=\"safe-area\"></div>\n      <Auth0Provider\n        domain={Auth0Config.domain}\n        clientId={Auth0Config.clientId}\n        authorizationParams={{\n          redirect_uri: window.location.origin,\n        }}\n      >\n        <TransitionGroup>\n          <CSSTransition\n            key={location.pathname}\n            timeout={0}\n            classNames={isSwipe ? \"fade\" : \"\"}\n            onExited={() => setIsSwipe(false)}\n            unmountOnExit\n          >\n            <Routes location={location}>\n              <Route\n                path=\"/\"\n                element={\n                  <Home notesState={notesState} setNotesState={setNotesState} />\n                }\n              />\n              <Route\n                path=\"/archive\"\n                element={\n                  <Archive\n                    notesState={notesState}\n                    setNotesState={setNotesState}\n                  />\n                }\n              />\n              <Route\n                path=\"/settings\"\n                element={\n                  <Settings\n                    notesState={notesState}\n                    setNotesState={setNotesState}\n                  />\n                }\n              />\n              <Route path=\"/about\" element={<About />} />\n              <Route\n                path=\"/dropbox\"\n                element={\n                  <Dropbox\n                    notesState={notesState}\n                    setNotesState={setNotesState}\n                  />\n                }\n              />\n              <Route\n                path=\"/onedrive\"\n                element={<Onedrive setNotesState={setNotesState} />}\n              />\n              <Route\n                path=\"/webdav\"\n                element={\n                  <Webdav\n                    notesState={notesState}\n                    setNotesState={setNotesState}\n                  />\n                }\n              />\n              <Route\n                path=\"/icloud\"\n                element={\n                  <Icloud\n                    notesState={notesState}\n                    setNotesState={setNotesState}\n                  />\n                }\n              />\n              <Route\n                path=\"/gdrive\"\n                element={<Gdrive setNotesState={setNotesState} />}\n              />\n              <Route path=\"/onedrive\" element={<Welcome />} />\n              <Route path=\"/shortcuts\" element={<Shortcuts />} />\n              <Route path=\"/welcome\" element={<Welcome />} />\n              <Route\n                path=\"/sync\"\n                element={\n                  <Sync notesState={notesState} setNotesState={setNotesState} />\n                }\n              />\n              <Route\n                path=\"/editor/:note\"\n                element={\n                  <Editor\n                    notesState={notesState}\n                    setNotesState={setNotesState}\n                  />\n                }\n              />\n            </Routes>\n          </CSSTransition>\n        </TransitionGroup>\n      </Auth0Provider>\n      <CommandPrompt\n        setIsCommandPromptOpen={setIsCommandPromptOpen}\n        isOpen={isCommandPromptOpen}\n        setNotesState={setNotesState}\n        notesState={notesState}\n      />\n      {shouldShowNavBar && (\n        <BottomNavBar notesState={notesState} setNotesState={setNotesState} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"
        }
    ]
}