{
    "sourceFile": "src/lib/tiptap/exts/paper-block/drawUtils.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1732173582543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732173619403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,55 @@\n \n const BUFFER_ZONE = 50;\n const INCREMENT_HEIGHT = 200;\n \n-export const useDrawing = ({ initialHeight = 400, initialLines = [], onUpdateAttributes }) => {\n- \n+export const useDrawing = ({\n+  initialHeight = 400,\n+  initialLines = [],\n+  onUpdateAttributes,\n+}) => {\n\\ No newline at end of file\n+  const startDrawing = (x, y) => {\n+    setDrawing(true);\n+    setPoints([{ x, y }]);\n+  };\n \n+  const draw = (x, y) => {\n+    if (!drawing) return;\n \n-  return {\n+    const newPoints = [...points, { x, y }];\n+    setPoints(newPoints);\n+    const newPath = lineGenerator(newPoints);\n+    setPath(newPath);\n+    if (y > svgHeight - BUFFER_ZONE) {\n+      const newHeight = svgHeight + INCREMENT_HEIGHT;\n+      setSvgHeight(newHeight);\n+      updateAttributes({ height: newHeight });\n+\n+      // Adjust scroll position to keep the drawing point in view\n+      const container = containerRef.current;\n+      if (container) {\n+        const scrollContainer = container.closest(\".drawing-component\");\n+        if (scrollContainer) {\n+          scrollContainer.scrollTo({\n+            top: scrollContainer.scrollHeight,\n+            behavior: \"smooth\",\n+          });\n+        }\n+      }\n+    }\n   };\n-};\n+\n+  const stopDrawing = () => {\n+    if (drawing) {\n+      setDrawing(false);\n+      saveDrawing();\n+      setHistory((prevHistory) => [\n+        ...prevHistory,\n+        { id, path, color, size, tool },\n+      ]);\n+      setPath(\"\");\n+      setPoints([]);\n+    }\n+  };\n+\n+  return {};\n+};\n"
                },
                {
                    "date": 1732173628779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,6 +68,10 @@\n       setPoints([]);\n     }\n   };\n \n-  return {};\n-};\n\\ No newline at end of file\n+  return {\n+    startDrawing,\n+    draw,\n+    stopDrawing,\n+  };\n+};\n"
                },
                {
                    "date": 1732173819635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,10 @@\n   initialHeight = 400,\n   initialLines = [],\n   onUpdateAttributes,\n }) => {\n+  const [drawing, setDrawing] = useState(false);\n+\n   const startDrawing = (x, y) => {\n     setDrawing(true);\n     setPoints([{ x, y }]);\n   };\n"
                },
                {
                    "date": 1732173842443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n   initialLines = [],\n   onUpdateAttributes,\n }) => {\n   const [drawing, setDrawing] = useState(false);\n+  const [points, setPoints] = useState([]);\n \n   const startDrawing = (x, y) => {\n     setDrawing(true);\n     setPoints([{ x, y }]);\n"
                },
                {
                    "date": 1732173858946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,6 +75,10 @@\n   return {\n     startDrawing,\n     draw,\n     stopDrawing,\n+    points,\n+    setPoints,\n+    draw,\n+    setDrawing\n   };\n };\n"
                },
                {
                    "date": 1732173899798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,95 @@\n+import { useState, useRef, useEffect, useMemo } from \"react\";\n+import * as d3 from \"d3\";\n+import { v4 as uuid } from \"uuid\";\n+\n+export const thicknessOptions = {\n+  thin: 2,\n+  medium: 3,\n+  thick: 4,\n+  thicker: 5,\n+  thickest: 6,\n+};\n+\n+export const backgroundStyles = {\n+  none: \"\",\n+  grid: \"grid\",\n+  ruled: \"ruled\",\n+  dotted: \"dotted\",\n+};\n+\n+const BUFFER_ZONE = 50;\n+const INCREMENT_HEIGHT = 200;\n+\n+export const useDrawing = ({\n+  initialHeight = 400,\n+  initialLines = [],\n+  onUpdateAttributes,\n+}) => {\n+  const [drawing, setDrawing] = useState(false);\n+  const [points, setPoints] = useState([]);\n+\n+  const startDrawing = (x, y) => {\n+    setDrawing(true);\n+    setPoints([{ x, y }]);\n+  };\n+\n+  const draw = (x, y) => {\n+    if (!drawing) return;\n+\n+    const newPoints = [...points, { x, y }];\n+    setPoints(newPoints);\n+    const newPath = lineGenerator(newPoints);\n+    setPath(newPath);\n+    if (y > svgHeight - BUFFER_ZONE) {\n+      const newHeight = svgHeight + INCREMENT_HEIGHT;\n+      setSvgHeight(newHeight);\n+      updateAttributes({ height: newHeight });\n+\n+      // Adjust scroll position to keep the drawing point in view\n+      const container = containerRef.current;\n+      if (container) {\n+        const scrollContainer = container.closest(\".drawing-component\");\n+        if (scrollContainer) {\n+          scrollContainer.scrollTo({\n+            top: scrollContainer.scrollHeight,\n+            behavior: \"smooth\",\n+          });\n+        }\n+      }\n+    }\n+  };\n+\n+  const stopDrawing = () => {\n+    if (drawing) {\n+      setDrawing(false);\n+      saveDrawing();\n+      setHistory((prevHistory) => [\n+        ...prevHistory,\n+        { id, path, color, size, tool },\n+      ]);\n+      setPath(\"\");\n+      setPoints([]);\n+    }\n+  };\n+\n+    // Memoize the line generator to prevent recreation\n+    const lineGenerator = useMemo(\n+        () =>\n+          d3\n+            .line()\n+            .x((d) => d.x)\n+            .y((d) => d.y)\n+            .curve(d3.curveBasis), // Adjusted alpha for more smoothness\n+        []\n+      );\n+\n+  return {\n+    startDrawing,\n+    draw,\n+    stopDrawing,\n+    points,\n+    setPoints,\n+    drawing,\n+    setDrawing\n+  };\n+};\n"
                },
                {
                    "date": 1732173930689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n   onUpdateAttributes,\n }) => {\n   const [drawing, setDrawing] = useState(false);\n   const [points, setPoints] = useState([]);\n+  const [path, setPath] = useState(\"\");\n \n   const startDrawing = (x, y) => {\n     setDrawing(true);\n     setPoints([{ x, y }]);\n@@ -89,91 +90,8 @@\n     stopDrawing,\n     points,\n     setPoints,\n     drawing,\n-    setDrawing\n+    setDrawing,\n+    lineGenerator\n   };\n };\n-import { useState, useRef, useEffect, useMemo } from \"react\";\n-import * as d3 from \"d3\";\n-import { v4 as uuid } from \"uuid\";\n-\n-export const thicknessOptions = {\n-  thin: 2,\n-  medium: 3,\n-  thick: 4,\n-  thicker: 5,\n-  thickest: 6,\n-};\n-\n-export const backgroundStyles = {\n-  none: \"\",\n-  grid: \"grid\",\n-  ruled: \"ruled\",\n-  dotted: \"dotted\",\n-};\n-\n-const BUFFER_ZONE = 50;\n-const INCREMENT_HEIGHT = 200;\n-\n-export const useDrawing = ({\n-  initialHeight = 400,\n-  initialLines = [],\n-  onUpdateAttributes,\n-}) => {\n-  const [drawing, setDrawing] = useState(false);\n-  const [points, setPoints] = useState([]);\n-\n-  const startDrawing = (x, y) => {\n-    setDrawing(true);\n-    setPoints([{ x, y }]);\n-  };\n-\n-  const draw = (x, y) => {\n-    if (!drawing) return;\n-\n-    const newPoints = [...points, { x, y }];\n-    setPoints(newPoints);\n-    const newPath = lineGenerator(newPoints);\n-    setPath(newPath);\n-    if (y > svgHeight - BUFFER_ZONE) {\n-      const newHeight = svgHeight + INCREMENT_HEIGHT;\n-      setSvgHeight(newHeight);\n-      updateAttributes({ height: newHeight });\n-\n-      // Adjust scroll position to keep the drawing point in view\n-      const container = containerRef.current;\n-      if (container) {\n-        const scrollContainer = container.closest(\".drawing-component\");\n-        if (scrollContainer) {\n-          scrollContainer.scrollTo({\n-            top: scrollContainer.scrollHeight,\n-            behavior: \"smooth\",\n-          });\n-        }\n-      }\n-    }\n-  };\n-\n-  const stopDrawing = () => {\n-    if (drawing) {\n-      setDrawing(false);\n-      saveDrawing();\n-      setHistory((prevHistory) => [\n-        ...prevHistory,\n-        { id, path, color, size, tool },\n-      ]);\n-      setPath(\"\");\n-      setPoints([]);\n-    }\n-  };\n-\n-  return {\n-    startDrawing,\n-    draw,\n-    stopDrawing,\n-    points,\n-    setPoints,\n-    draw,\n-    setDrawing\n-  };\n-};\n"
                },
                {
                    "date": 1732173937745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,7 +91,9 @@\n     points,\n     setPoints,\n     drawing,\n     setDrawing,\n-    lineGenerator\n+    lineGenerator,\n+    path,\n+    setPath,\n   };\n };\n"
                },
                {
                    "date": 1732173967290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,19 +72,35 @@\n       setPoints([]);\n     }\n   };\n \n-    // Memoize the line generator to prevent recreation\n-    const lineGenerator = useMemo(\n-        () =>\n-          d3\n-            .line()\n-            .x((d) => d.x)\n-            .y((d) => d.y)\n-            .curve(d3.curveBasis), // Adjusted alpha for more smoothness\n-        []\n-      );\n+  // Memoize the line generator to prevent recreation\n+  const lineGenerator = useMemo(\n+    () =>\n+      d3\n+        .line()\n+        .x((d) => d.x)\n+        .y((d) => d.y)\n+        .curve(d3.curveBasis), // Adjusted alpha for more smoothness\n+    []\n+  );\n \n+  // Optimize save drawing function\n+  const saveDrawing = () => {\n+    if (!path) return;\n+\n+    const newLine = { id: uuid(), path, color, size, tool };\n+    linesRef.current = [...linesRef.current, newLine];\n+\n+    setHistory((prevHistory) => [\n+      ...prevHistory,\n+      { action: \"add\", line: newLine },\n+    ]);\n+\n+    setRedoStack([]);\n+    batchUpdatePaths();\n+  };\n+\n   return {\n     startDrawing,\n     draw,\n     stopDrawing,\n"
                },
                {
                    "date": 1732173983918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n }) => {\n   const [drawing, setDrawing] = useState(false);\n   const [points, setPoints] = useState([]);\n   const [path, setPath] = useState(\"\");\n+  const [svgHeight, setSvgHeight] = useState(node.attrs.height || 400);\n \n   const startDrawing = (x, y) => {\n     setDrawing(true);\n     setPoints([{ x, y }]);\n@@ -110,6 +111,7 @@\n     setDrawing,\n     lineGenerator,\n     path,\n     setPath,\n+    saveDrawing,\n   };\n };\n"
                },
                {
                    "date": 1732173990856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,6 +112,8 @@\n     lineGenerator,\n     path,\n     setPath,\n     saveDrawing,\n+    svgHeight,\n+    setSvgHeight\n   };\n };\n"
                },
                {
                    "date": 1732174010658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,9 @@\n const BUFFER_ZONE = 50;\n const INCREMENT_HEIGHT = 200;\n \n export const useDrawing = ({\n-  initialHeight = 400,\n-  initialLines = [],\n-  onUpdateAttributes,\n+    node,\n }) => {\n   const [drawing, setDrawing] = useState(false);\n   const [points, setPoints] = useState([]);\n   const [path, setPath] = useState(\"\");\n"
                },
                {
                    "date": 1732174164037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n   const [drawing, setDrawing] = useState(false);\n   const [points, setPoints] = useState([]);\n   const [path, setPath] = useState(\"\");\n   const [svgHeight, setSvgHeight] = useState(node.attrs.height || 400);\n+  const [color, setColor] = useState(isDarkMode ? \"#FFFFFF\" : \"#000000\");\n \n   const startDrawing = (x, y) => {\n     setDrawing(true);\n     setPoints([{ x, y }]);\n"
                },
                {
                    "date": 1732174170797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,7 +112,9 @@\n     path,\n     setPath,\n     saveDrawing,\n     svgHeight,\n-    setSvgHeight\n+    setSvgHeight,\n+    color, \n+    setColor\n   };\n };\n"
                },
                {
                    "date": 1732174189011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,11 @@\n \n const BUFFER_ZONE = 50;\n const INCREMENT_HEIGHT = 200;\n \n-export const useDrawing = ({\n-    node,\n-}) => {\n+export const useDrawing = ({ node }) => {\n+  const isDarkMode = document.documentElement.classList.contains(\"dark\");\n+\n   const [drawing, setDrawing] = useState(false);\n   const [points, setPoints] = useState([]);\n   const [path, setPath] = useState(\"\");\n   const [svgHeight, setSvgHeight] = useState(node.attrs.height || 400);\n@@ -113,8 +113,8 @@\n     setPath,\n     saveDrawing,\n     svgHeight,\n     setSvgHeight,\n-    color, \n-    setColor\n+    color,\n+    setColor,\n   };\n };\n"
                },
                {
                    "date": 1732174237974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,17 +19,76 @@\n \n const BUFFER_ZONE = 50;\n const INCREMENT_HEIGHT = 200;\n \n-export const useDrawing = ({ node }) => {\n+export const useDrawing = ({ initialHeight = 400, initialLines = [], onUpdateAttributes }) => {\n   const isDarkMode = document.documentElement.classList.contains(\"dark\");\n-\n   const [drawing, setDrawing] = useState(false);\n   const [points, setPoints] = useState([]);\n   const [path, setPath] = useState(\"\");\n-  const [svgHeight, setSvgHeight] = useState(node.attrs.height || 400);\n+  const [svgHeight, setSvgHeight] = useState(initialHeight);\n+  const [tool, setTool] = useState(\"pencil\");\n   const [color, setColor] = useState(isDarkMode ? \"#FFFFFF\" : \"#000000\");\n+  const [size, setSize] = useState(thicknessOptions.thin);\n+  const [history, setHistory] = useState([]);\n+  const [redoStack, setRedoStack] = useState([]);\n+  const [background, setBackground] = useState(backgroundStyles.none);\n \n+  const svgRef = useRef(null);\n+  const linesRef = useRef(initialLines);\n+  const pathsGroupRef = useRef(null);\n+  const activePathRef = useRef(null);\n+  const throttleRef = useRef(null);\n+  const batchUpdateTimeoutRef = useRef(null);\n+\n+  const lineGenerator = useMemo(\n+    () =>\n+      d3\n+        .line()\n+        .x((d) => d.x)\n+        .y((d) => d.y)\n+        .curve(d3.curveBasis),\n+    []\n+  );\n+\n+  const smoothPoints = (points) => {\n+    if (points.length < 3) return points;\n+    return points.map((point, i, arr) => {\n+      if (i === 0 || i === arr.length - 1) return point;\n+      const prev = arr[i - 1];\n+      const next = arr[i + 1];\n+      return {\n+        x: (prev.x + point.x + next.x) / 3,\n+        y: (prev.y + point.y + next.y) / 3,\n+      };\n+    });\n+  };\n+\n+  const batchUpdatePaths = () => {\n+    if (batchUpdateTimeoutRef.current) {\n+      clearTimeout(batchUpdateTimeoutRef.current);\n+    }\n+\n+    batchUpdateTimeoutRef.current = setTimeout(() => {\n+      onUpdateAttributes({\n+        lines: linesRef.current,\n+      });\n+    }, 500);\n+  };\n+\n+  const getPointerCoordinates = (event) => {\n+    const svg = svgRef.current;\n+    const rect = svg.getBoundingClientRect();\n+    const clientX = event.touches ? event.touches[0].clientX : event.clientX;\n+    const clientY = event.touches ? event.touches[0].clientY : event.clientY;\n+    const scaleX = svg.viewBox.baseVal.width / rect.width;\n+    const scaleY = svg.viewBox.baseVal.height / rect.height;\n+    return [\n+      (clientX - rect.left) * scaleX,\n+      (clientY - rect.top) * scaleY,\n+    ];\n+  };\n+\n   const startDrawing = (x, y) => {\n     setDrawing(true);\n     setPoints([{ x, y }]);\n   };\n@@ -38,26 +97,15 @@\n     if (!drawing) return;\n \n     const newPoints = [...points, { x, y }];\n     setPoints(newPoints);\n-    const newPath = lineGenerator(newPoints);\n+    const newPath = lineGenerator(smoothPoints(newPoints));\n     setPath(newPath);\n+\n     if (y > svgHeight - BUFFER_ZONE) {\n       const newHeight = svgHeight + INCREMENT_HEIGHT;\n       setSvgHeight(newHeight);\n-      updateAttributes({ height: newHeight });\n-\n-      // Adjust scroll position to keep the drawing point in view\n-      const container = containerRef.current;\n-      if (container) {\n-        const scrollContainer = container.closest(\".drawing-component\");\n-        if (scrollContainer) {\n-          scrollContainer.scrollTo({\n-            top: scrollContainer.scrollHeight,\n-            behavior: \"smooth\",\n-          });\n-        }\n-      }\n+      onUpdateAttributes({ height: newHeight });\n     }\n   };\n \n   const stopDrawing = () => {\n@@ -65,56 +113,115 @@\n       setDrawing(false);\n       saveDrawing();\n       setHistory((prevHistory) => [\n         ...prevHistory,\n-        { id, path, color, size, tool },\n+        { action: \"add\", line: { id: uuid(), path, color, size, tool } },\n       ]);\n       setPath(\"\");\n       setPoints([]);\n     }\n   };\n \n-  // Memoize the line generator to prevent recreation\n-  const lineGenerator = useMemo(\n-    () =>\n-      d3\n-        .line()\n-        .x((d) => d.x)\n-        .y((d) => d.y)\n-        .curve(d3.curveBasis), // Adjusted alpha for more smoothness\n-    []\n-  );\n-\n-  // Optimize save drawing function\n   const saveDrawing = () => {\n     if (!path) return;\n \n     const newLine = { id: uuid(), path, color, size, tool };\n     linesRef.current = [...linesRef.current, newLine];\n+    batchUpdatePaths();\n+  };\n \n-    setHistory((prevHistory) => [\n-      ...prevHistory,\n-      { action: \"add\", line: newLine },\n-    ]);\n+  const undo = () => {\n+    if (history.length > 0) {\n+      const lastAction = history[history.length - 1];\n+      setHistory((prevHistory) => prevHistory.slice(0, -1));\n+      setRedoStack((prevStack) => [...prevStack, lastAction]);\n \n-    setRedoStack([]);\n-    batchUpdatePaths();\n+      if (lastAction.action === \"add\") {\n+        linesRef.current = linesRef.current.filter(\n+          (line) => line.id !== lastAction.line.id\n+        );\n+      } else if (lastAction.action === \"delete\") {\n+        linesRef.current = [...linesRef.current, lastAction.line];\n+      }\n+\n+      onUpdateAttributes({\n+        lines: linesRef.current,\n+      });\n+    }\n   };\n \n+  const redo = () => {\n+    if (redoStack.length > 0) {\n+      const lastRedo = redoStack[redoStack.length - 1];\n+      setRedoStack((prevStack) => prevStack.slice(0, -1));\n+      setHistory((prevHistory) => [...prevHistory, lastRedo]);\n+\n+      if (lastRedo.action === \"add\") {\n+        linesRef.current = [...linesRef.current, lastRedo.line];\n+      } else if (lastRedo.action === \"delete\") {\n+        linesRef.current = linesRef.current.filter(\n+          (line) => line.id !== lastRedo.line.id\n+        );\n+      }\n+\n+      onUpdateAttributes({\n+        lines: linesRef.current,\n+      });\n+    }\n+  };\n+\n+  const deletePath = (pathElement) => {\n+    const clickedPathData = pathElement.getAttribute(\"d\");\n+    const pathIndex = linesRef.current.findIndex(\n+      (line) => line.path === clickedPathData\n+    );\n+\n+    if (pathIndex !== -1) {\n+      const removedLine = linesRef.current[pathIndex];\n+      setHistory((prevHistory) => [\n+        ...prevHistory,\n+        { action: \"delete\", line: removedLine },\n+      ]);\n+      linesRef.current.splice(pathIndex, 1);\n+      onUpdateAttributes({\n+        lines: linesRef.current,\n+      });\n+    }\n+  };\n+\n+  const adjustColorForMode = (color) => {\n+    if (isDarkMode) {\n+      return color === \"#000000\" ? \"#FFFFFF\" : color;\n+    } else {\n+      return color === \"#FFFFFF\" ? \"#000000\" : color;\n+    }\n+  };\n+\n   return {\n-    startDrawing,\n-    draw,\n-    stopDrawing,\n+    drawing,\n     points,\n-    setPoints,\n-    drawing,\n-    setDrawing,\n-    lineGenerator,\n     path,\n-    setPath,\n-    saveDrawing,\n     svgHeight,\n-    setSvgHeight,\n+    tool,\n     color,\n+    size,\n+    background,\n+    history,\n+    redoStack,\n+    svgRef,\n+    linesRef,\n+    pathsGroupRef,\n+    activePathRef,\n+    setTool,\n     setColor,\n+    setSize,\n+    setBackground,\n+    startDrawing,\n+    draw,\n+    stopDrawing,\n+    undo,\n+    redo,\n+    deletePath,\n+    getPointerCoordinates,\n+    adjustColorForMode,\n   };\n-};\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732174293657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,11 @@\n   const [color, setColor] = useState(isDarkMode ? \"#FFFFFF\" : \"#000000\");\n   const [size, setSize] = useState(thicknessOptions.thin);\n   const [history, setHistory] = useState([]);\n   const [redoStack, setRedoStack] = useState([]);\n-  const [background, setBackground] = useState(backgroundStyles.none);\n-\n+  const [background, setBackground] = useState(\n+    node.attrs.paperType || backgroundStyles.none\n+  );\n   const svgRef = useRef(null);\n   const linesRef = useRef(initialLines);\n   const pathsGroupRef = useRef(null);\n   const activePathRef = useRef(null);\n"
                },
                {
                    "date": 1732174315288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n \n const BUFFER_ZONE = 50;\n const INCREMENT_HEIGHT = 200;\n \n-export const useDrawing = ({ initialHeight = 400, initialLines = [], onUpdateAttributes }) => {\n+export const useDrawing = ({ initialHeight = 400, initialLines = [], onUpdateAttributes, node }) => {\n   const isDarkMode = document.documentElement.classList.contains(\"dark\");\n   const [drawing, setDrawing] = useState(false);\n   const [points, setPoints] = useState([]);\n   const [path, setPath] = useState(\"\");\n@@ -34,9 +34,9 @@\n   const [background, setBackground] = useState(\n     node.attrs.paperType || backgroundStyles.none\n   );\n   const svgRef = useRef(null);\n-  const linesRef = useRef(initialLines);\n+  const linesRef = useRef(node.attrs.lines || []);\n   const pathsGroupRef = useRef(null);\n   const activePathRef = useRef(null);\n   const throttleRef = useRef(null);\n   const batchUpdateTimeoutRef = useRef(null);\n"
                },
                {
                    "date": 1732175124877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,14 @@\n \n const BUFFER_ZONE = 50;\n const INCREMENT_HEIGHT = 200;\n \n-export const useDrawing = ({ initialHeight = 400, initialLines = [], onUpdateAttributes, node }) => {\n+export const useDrawing = ({\n+  initialHeight = 400,\n+  initialLines = [],\n+  onUpdateAttributes,\n+  node,\n+}) => {\n   const isDarkMode = document.documentElement.classList.contains(\"dark\");\n   const [drawing, setDrawing] = useState(false);\n   const [points, setPoints] = useState([]);\n   const [path, setPath] = useState(\"\");\n@@ -82,12 +87,9 @@\n     const clientX = event.touches ? event.touches[0].clientX : event.clientX;\n     const clientY = event.touches ? event.touches[0].clientY : event.clientY;\n     const scaleX = svg.viewBox.baseVal.width / rect.width;\n     const scaleY = svg.viewBox.baseVal.height / rect.height;\n-    return [\n-      (clientX - rect.left) * scaleX,\n-      (clientY - rect.top) * scaleY,\n-    ];\n+    return [(clientX - rect.left) * scaleX, (clientY - rect.top) * scaleY];\n   };\n \n   const startDrawing = (x, y) => {\n     setDrawing(true);\n@@ -98,15 +100,26 @@\n     if (!drawing) return;\n \n     const newPoints = [...points, { x, y }];\n     setPoints(newPoints);\n-    const newPath = lineGenerator(smoothPoints(newPoints));\n+    const newPath = lineGenerator(newPoints);\n     setPath(newPath);\n-\n     if (y > svgHeight - BUFFER_ZONE) {\n       const newHeight = svgHeight + INCREMENT_HEIGHT;\n       setSvgHeight(newHeight);\n-      onUpdateAttributes({ height: newHeight });\n+      updateAttributes({ height: newHeight });\n+\n+      // Adjust scroll position to keep the drawing point in view\n+      const container = containerRef.current;\n+      if (container) {\n+        const scrollContainer = container.closest(\".drawing-component\");\n+        if (scrollContainer) {\n+          scrollContainer.scrollTo({\n+            top: scrollContainer.scrollHeight,\n+            behavior: \"smooth\",\n+          });\n+        }\n+      }\n     }\n   };\n \n   const stopDrawing = () => {\n@@ -224,5 +237,5 @@\n     deletePath,\n     getPointerCoordinates,\n     adjustColorForMode,\n   };\n-};\n\\ No newline at end of file\n+};\n"
                },
                {
                    "date": 1732175169918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,13 +83,21 @@\n \n   const getPointerCoordinates = (event) => {\n     const svg = svgRef.current;\n     const rect = svg.getBoundingClientRect();\n+\n+    // Get the correct pointer position, including page scroll and scale\n     const clientX = event.touches ? event.touches[0].clientX : event.clientX;\n     const clientY = event.touches ? event.touches[0].clientY : event.clientY;\n+\n+    // Calculate the mouse position relative to the SVG\n     const scaleX = svg.viewBox.baseVal.width / rect.width;\n     const scaleY = svg.viewBox.baseVal.height / rect.height;\n-    return [(clientX - rect.left) * scaleX, (clientY - rect.top) * scaleY];\n+\n+    const x = (clientX - rect.left) * scaleX;\n+    const y = (clientY - rect.top) * scaleY;\n+\n+    return [x, y];\n   };\n \n   const startDrawing = (x, y) => {\n     setDrawing(true);\n"
                },
                {
                    "date": 1732175577452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,37 @@\n import { useState, useRef, useEffect, useMemo } from \"react\";\n import * as d3 from \"d3\";\n import { v4 as uuid } from \"uuid\";\n \n-export const thicknessOptions = {\n-  thin: 2,\n-  medium: 3,\n-  thick: 4,\n-  thicker: 5,\n-  thickest: 6,\n-};\n-\n-export const backgroundStyles = {\n-  none: \"\",\n-  grid: \"grid\",\n-  ruled: \"ruled\",\n-  dotted: \"dotted\",\n-};\n-\n const BUFFER_ZONE = 50;\n const INCREMENT_HEIGHT = 200;\n \n-export const useDrawing = ({\n-  initialHeight = 400,\n-  initialLines = [],\n-  onUpdateAttributes,\n-  node,\n-}) => {\n+export const useDrawLogic = (node, updateAttributes) => {\n   const isDarkMode = document.documentElement.classList.contains(\"dark\");\n+\n+  const [isDrawing, setIsDrawing] = useState(false);\n+  const [drawingPath, setDrawingPath] = useState(\"\");\n+  const [lines, setLines] = useState([]);\n+  const pointsRef = useRef([]);\n+  const historyRef = useRef([]);\n+  const redoStackRef = useRef([]);\n+  const svgRef = useRef(null);\n+\n+  const [color, setColor] = useState(isDarkMode ? \"#FFFFFF\" : \"#000000\");\n+  const [size, setSize] = useState(2);\n   const [drawing, setDrawing] = useState(false);\n   const [points, setPoints] = useState([]);\n   const [path, setPath] = useState(\"\");\n-  const [svgHeight, setSvgHeight] = useState(initialHeight);\n+  const [svgHeight, setSvgHeight] = useState(node.attrs.height || 400);\n+  const [svgWidth] = useState(500);\n   const [tool, setTool] = useState(\"pencil\");\n-  const [color, setColor] = useState(isDarkMode ? \"#FFFFFF\" : \"#000000\");\n-  const [size, setSize] = useState(thicknessOptions.thin);\n   const [history, setHistory] = useState([]);\n   const [redoStack, setRedoStack] = useState([]);\n-  const [background, setBackground] = useState(\n-    node.attrs.paperType || backgroundStyles.none\n-  );\n-  const svgRef = useRef(null);\n+  const [isResizing, setIsResizing] = useState(false);\n+  const [startY, setStartY] = useState(0);\n+  const [id] = useState(() => node.attrs.id || uuid());\n+\n   const linesRef = useRef(node.attrs.lines || []);\n-  const pathsGroupRef = useRef(null);\n-  const activePathRef = useRef(null);\n-  const throttleRef = useRef(null);\n-  const batchUpdateTimeoutRef = useRef(null);\n \n   const lineGenerator = useMemo(\n     () =>\n       d3\n@@ -55,42 +41,15 @@\n         .curve(d3.curveBasis),\n     []\n   );\n \n-  const smoothPoints = (points) => {\n-    if (points.length < 3) return points;\n-    return points.map((point, i, arr) => {\n-      if (i === 0 || i === arr.length - 1) return point;\n-      const prev = arr[i - 1];\n-      const next = arr[i + 1];\n-      return {\n-        x: (prev.x + point.x + next.x) / 3,\n-        y: (prev.y + point.y + next.y) / 3,\n-      };\n-    });\n-  };\n-\n-  const batchUpdatePaths = () => {\n-    if (batchUpdateTimeoutRef.current) {\n-      clearTimeout(batchUpdateTimeoutRef.current);\n-    }\n-\n-    batchUpdateTimeoutRef.current = setTimeout(() => {\n-      onUpdateAttributes({\n-        lines: linesRef.current,\n-      });\n-    }, 500);\n-  };\n-\n   const getPointerCoordinates = (event) => {\n     const svg = svgRef.current;\n     const rect = svg.getBoundingClientRect();\n \n-    // Get the correct pointer position, including page scroll and scale\n     const clientX = event.touches ? event.touches[0].clientX : event.clientX;\n     const clientY = event.touches ? event.touches[0].clientY : event.clientY;\n \n-    // Calculate the mouse position relative to the SVG\n     const scaleX = svg.viewBox.baseVal.width / rect.width;\n     const scaleY = svg.viewBox.baseVal.height / rect.height;\n \n     const x = (clientX - rect.left) * scaleX;\n@@ -110,24 +69,13 @@\n     const newPoints = [...points, { x, y }];\n     setPoints(newPoints);\n     const newPath = lineGenerator(newPoints);\n     setPath(newPath);\n+\n     if (y > svgHeight - BUFFER_ZONE) {\n       const newHeight = svgHeight + INCREMENT_HEIGHT;\n       setSvgHeight(newHeight);\n       updateAttributes({ height: newHeight });\n-\n-      // Adjust scroll position to keep the drawing point in view\n-      const container = containerRef.current;\n-      if (container) {\n-        const scrollContainer = container.closest(\".drawing-component\");\n-        if (scrollContainer) {\n-          scrollContainer.scrollTo({\n-            top: scrollContainer.scrollHeight,\n-            behavior: \"smooth\",\n-          });\n-        }\n-      }\n     }\n   };\n \n   const stopDrawing = () => {\n@@ -135,9 +83,9 @@\n       setDrawing(false);\n       saveDrawing();\n       setHistory((prevHistory) => [\n         ...prevHistory,\n-        { action: \"add\", line: { id: uuid(), path, color, size, tool } },\n+        { id, path, color, size, tool },\n       ]);\n       setPath(\"\");\n       setPoints([]);\n     }\n@@ -147,103 +95,76 @@\n     if (!path) return;\n \n     const newLine = { id: uuid(), path, color, size, tool };\n     linesRef.current = [...linesRef.current, newLine];\n-    batchUpdatePaths();\n+\n+    setHistory((prevHistory) => [\n+      ...prevHistory,\n+      { action: \"add\", line: newLine },\n+    ]);\n+\n+    setRedoStack([]);\n+    updateAttributes({ lines: linesRef.current });\n   };\n \n   const undo = () => {\n     if (history.length > 0) {\n-      const lastAction = history[history.length - 1];\n-      setHistory((prevHistory) => prevHistory.slice(0, -1));\n-      setRedoStack((prevStack) => [...prevStack, lastAction]);\n+      const lastAction = history.pop();\n+      setRedoStack((prev) => [...prev, lastAction]);\n+      setHistory(history);\n \n       if (lastAction.action === \"add\") {\n         linesRef.current = linesRef.current.filter(\n           (line) => line.id !== lastAction.line.id\n         );\n       } else if (lastAction.action === \"delete\") {\n-        linesRef.current = [...linesRef.current, lastAction.line];\n+        linesRef.current.push(lastAction.line);\n       }\n \n-      onUpdateAttributes({\n-        lines: linesRef.current,\n-      });\n+      updateAttributes({ lines: linesRef.current });\n     }\n   };\n \n   const redo = () => {\n     if (redoStack.length > 0) {\n-      const lastRedo = redoStack[redoStack.length - 1];\n-      setRedoStack((prevStack) => prevStack.slice(0, -1));\n-      setHistory((prevHistory) => [...prevHistory, lastRedo]);\n+      const lastRedo = redoStack.pop();\n+      setHistory((prev) => [...prev, lastRedo]);\n+      setRedoStack(redoStack);\n \n       if (lastRedo.action === \"add\") {\n-        linesRef.current = [...linesRef.current, lastRedo.line];\n+        linesRef.current.push(lastRedo.line);\n       } else if (lastRedo.action === \"delete\") {\n         linesRef.current = linesRef.current.filter(\n           (line) => line.id !== lastRedo.line.id\n         );\n       }\n \n-      onUpdateAttributes({\n-        lines: linesRef.current,\n-      });\n+      updateAttributes({ lines: linesRef.current });\n     }\n   };\n \n-  const deletePath = (pathElement) => {\n-    const clickedPathData = pathElement.getAttribute(\"d\");\n-    const pathIndex = linesRef.current.findIndex(\n-      (line) => line.path === clickedPathData\n-    );\n-\n-    if (pathIndex !== -1) {\n-      const removedLine = linesRef.current[pathIndex];\n-      setHistory((prevHistory) => [\n-        ...prevHistory,\n-        { action: \"delete\", line: removedLine },\n-      ]);\n-      linesRef.current.splice(pathIndex, 1);\n-      onUpdateAttributes({\n-        lines: linesRef.current,\n-      });\n-    }\n+  const changeTool = (selectedTool, selectedColor) => {\n+    setTool(selectedTool);\n+    setColor(selectedColor || color);\n   };\n \n-  const adjustColorForMode = (color) => {\n-    if (isDarkMode) {\n-      return color === \"#000000\" ? \"#FFFFFF\" : color;\n-    } else {\n-      return color === \"#FFFFFF\" ? \"#000000\" : color;\n-    }\n-  };\n-\n   return {\n-    drawing,\n-    points,\n-    path,\n-    svgHeight,\n-    tool,\n-    color,\n-    size,\n-    background,\n-    history,\n-    redoStack,\n     svgRef,\n     linesRef,\n-    pathsGroupRef,\n-    activePathRef,\n-    setTool,\n+    color,\n     setColor,\n+    size,\n     setSize,\n-    setBackground,\n+    tool,\n+    setTool,\n+    isDrawing,\n+    undo,\n+    redo,\n     startDrawing,\n     draw,\n     stopDrawing,\n-    undo,\n-    redo,\n-    deletePath,\n-    getPointerCoordinates,\n-    adjustColorForMode,\n+    changeTool,\n+    svgHeight,\n+    setSvgHeight,\n+    svgWidth,\n   };\n };\n"
                },
                {
                    "date": 1732175687127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,31 +7,21 @@\n \n export const useDrawLogic = (node, updateAttributes) => {\n   const isDarkMode = document.documentElement.classList.contains(\"dark\");\n \n+  // States and Refs\n   const [isDrawing, setIsDrawing] = useState(false);\n-  const [drawingPath, setDrawingPath] = useState(\"\");\n-  const [lines, setLines] = useState([]);\n-  const pointsRef = useRef([]);\n-  const historyRef = useRef([]);\n-  const redoStackRef = useRef([]);\n-  const svgRef = useRef(null);\n-\n-  const [color, setColor] = useState(isDarkMode ? \"#FFFFFF\" : \"#000000\");\n-  const [size, setSize] = useState(2);\n-  const [drawing, setDrawing] = useState(false);\n   const [points, setPoints] = useState([]);\n   const [path, setPath] = useState(\"\");\n   const [svgHeight, setSvgHeight] = useState(node.attrs.height || 400);\n   const [svgWidth] = useState(500);\n   const [tool, setTool] = useState(\"pencil\");\n+  const [color, setColor] = useState(isDarkMode ? \"#FFFFFF\" : \"#000000\");\n+  const [size, setSize] = useState(2); // Default thickness\n   const [history, setHistory] = useState([]);\n   const [redoStack, setRedoStack] = useState([]);\n-  const [isResizing, setIsResizing] = useState(false);\n-  const [startY, setStartY] = useState(0);\n-  const [id] = useState(() => node.attrs.id || uuid());\n-\n   const linesRef = useRef(node.attrs.lines || []);\n+  const svgRef = useRef(null);\n \n   const lineGenerator = useMemo(\n     () =>\n       d3\n@@ -41,12 +31,12 @@\n         .curve(d3.curveBasis),\n     []\n   );\n \n+  // Helper Functions\n   const getPointerCoordinates = (event) => {\n     const svg = svgRef.current;\n     const rect = svg.getBoundingClientRect();\n-\n     const clientX = event.touches ? event.touches[0].clientX : event.clientX;\n     const clientY = event.touches ? event.touches[0].clientY : event.clientY;\n \n     const scaleX = svg.viewBox.baseVal.width / rect.width;\n@@ -58,17 +48,18 @@\n     return [x, y];\n   };\n \n   const startDrawing = (x, y) => {\n-    setDrawing(true);\n+    setIsDrawing(true);\n     setPoints([{ x, y }]);\n   };\n \n   const draw = (x, y) => {\n-    if (!drawing) return;\n+    if (!isDrawing) return;\n \n     const newPoints = [...points, { x, y }];\n     setPoints(newPoints);\n+\n     const newPath = lineGenerator(newPoints);\n     setPath(newPath);\n \n     if (y > svgHeight - BUFFER_ZONE) {\n@@ -78,15 +69,11 @@\n     }\n   };\n \n   const stopDrawing = () => {\n-    if (drawing) {\n-      setDrawing(false);\n+    if (isDrawing) {\n+      setIsDrawing(false);\n       saveDrawing();\n-      setHistory((prevHistory) => [\n-        ...prevHistory,\n-        { id, path, color, size, tool },\n-      ]);\n       setPath(\"\");\n       setPoints([]);\n     }\n   };\n@@ -108,17 +95,16 @@\n \n   const undo = () => {\n     if (history.length > 0) {\n       const lastAction = history.pop();\n-      setRedoStack((prev) => [...prev, lastAction]);\n-      setHistory(history);\n+      setRedoStack((prevStack) => [...prevStack, lastAction]);\n \n       if (lastAction.action === \"add\") {\n         linesRef.current = linesRef.current.filter(\n           (line) => line.id !== lastAction.line.id\n         );\n       } else if (lastAction.action === \"delete\") {\n-        linesRef.current.push(lastAction.line);\n+        linesRef.current = [...linesRef.current, lastAction.line];\n       }\n \n       updateAttributes({ lines: linesRef.current });\n     }\n@@ -126,13 +112,12 @@\n \n   const redo = () => {\n     if (redoStack.length > 0) {\n       const lastRedo = redoStack.pop();\n-      setHistory((prev) => [...prev, lastRedo]);\n-      setRedoStack(redoStack);\n+      setHistory((prevHistory) => [...prevHistory, lastRedo]);\n \n       if (lastRedo.action === \"add\") {\n-        linesRef.current.push(lastRedo.line);\n+        linesRef.current = [...linesRef.current, lastRedo.line];\n       } else if (lastRedo.action === \"delete\") {\n         linesRef.current = linesRef.current.filter(\n           (line) => line.id !== lastRedo.line.id\n         );\n@@ -141,30 +126,27 @@\n       updateAttributes({ lines: linesRef.current });\n     }\n   };\n \n-  const changeTool = (selectedTool, selectedColor) => {\n-    setTool(selectedTool);\n-    setColor(selectedColor || color);\n-  };\n-\n   return {\n+    isDrawing,\n+    setIsDrawing,\n     svgRef,\n-    linesRef,\n+    points,\n+    path,\n     color,\n+    size,\n+    tool,\n+    svgHeight,\n+    svgWidth,\n+    history,\n+    redoStack,\n     setColor,\n-    size,\n     setSize,\n-    tool,\n     setTool,\n-    isDrawing,\n     undo,\n     redo,\n     startDrawing,\n     draw,\n     stopDrawing,\n-    changeTool,\n-    svgHeight,\n-    setSvgHeight,\n-    svgWidth,\n   };\n };\n"
                }
            ],
            "date": 1732173582543,
            "name": "Commit-0",
            "content": "import { useState, useRef, useEffect, useMemo } from \"react\";\nimport * as d3 from \"d3\";\nimport { v4 as uuid } from \"uuid\";\n\nexport const thicknessOptions = {\n  thin: 2,\n  medium: 3,\n  thick: 4,\n  thicker: 5,\n  thickest: 6,\n};\n\nexport const backgroundStyles = {\n  none: \"\",\n  grid: \"grid\",\n  ruled: \"ruled\",\n  dotted: \"dotted\",\n};\n\nconst BUFFER_ZONE = 50;\nconst INCREMENT_HEIGHT = 200;\n\nexport const useDrawing = ({ initialHeight = 400, initialLines = [], onUpdateAttributes }) => {\n \n\n\n  return {\n  };\n};"
        }
    ]
}