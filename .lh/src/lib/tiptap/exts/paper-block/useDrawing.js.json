{
    "sourceFile": "src/lib/tiptap/exts/paper-block/useDrawing.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1732016836934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732094182223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,13 @@\n \n const BUFFER_ZONE = 50;\n const INCREMENT_HEIGHT = 200;\n \n-export const useDrawing = ({ initialHeight = 400, initialLines = [], onUpdateAttributes }) => {\n+export const useDrawing = ({\n+  initialHeight = 400,\n+  initialLines = [],\n+  onUpdateAttributes,\n+}) => {\n   const isDarkMode = document.documentElement.classList.contains(\"dark\");\n   const [drawing, setDrawing] = useState(false);\n   const [points, setPoints] = useState([]);\n   const [path, setPath] = useState(\"\");\n@@ -81,12 +85,9 @@\n     const clientX = event.touches ? event.touches[0].clientX : event.clientX;\n     const clientY = event.touches ? event.touches[0].clientY : event.clientY;\n     const scaleX = svg.viewBox.baseVal.width / rect.width;\n     const scaleY = svg.viewBox.baseVal.height / rect.height;\n-    return [\n-      (clientX - rect.left) * scaleX,\n-      (clientY - rect.top) * scaleY,\n-    ];\n+    return [(clientX - rect.left) * scaleX, (clientY - rect.top) * scaleY];\n   };\n \n   const startDrawing = (x, y) => {\n     setDrawing(true);\n@@ -128,23 +129,26 @@\n     linesRef.current = [...linesRef.current, newLine];\n     batchUpdatePaths();\n   };\n \n+  // Store only actions in history (add or delete)\n   const undo = () => {\n     if (history.length > 0) {\n       const lastAction = history[history.length - 1];\n       setHistory((prevHistory) => prevHistory.slice(0, -1));\n       setRedoStack((prevStack) => [...prevStack, lastAction]);\n \n       if (lastAction.action === \"add\") {\n+        // Undo adding a line by removing it\n         linesRef.current = linesRef.current.filter(\n           (line) => line.id !== lastAction.line.id\n         );\n       } else if (lastAction.action === \"delete\") {\n+        // Undo deleting a line by adding it back\n         linesRef.current = [...linesRef.current, lastAction.line];\n       }\n \n-      onUpdateAttributes({\n+      updateAttributes({\n         lines: linesRef.current,\n       });\n     }\n   };\n@@ -223,5 +227,5 @@\n     deletePath,\n     getPointerCoordinates,\n     adjustColorForMode,\n   };\n-};\n\\ No newline at end of file\n+};\n"
                },
                {
                    "date": 1732094191651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,8 @@\n     linesRef.current = [...linesRef.current, newLine];\n     batchUpdatePaths();\n   };\n \n-  // Store only actions in history (add or delete)\n   const undo = () => {\n     if (history.length > 0) {\n       const lastAction = history[history.length - 1];\n       setHistory((prevHistory) => prevHistory.slice(0, -1));\n@@ -159,21 +158,24 @@\n       setRedoStack((prevStack) => prevStack.slice(0, -1));\n       setHistory((prevHistory) => [...prevHistory, lastRedo]);\n \n       if (lastRedo.action === \"add\") {\n+        // Redo adding a line by adding it back\n         linesRef.current = [...linesRef.current, lastRedo.line];\n       } else if (lastRedo.action === \"delete\") {\n+        // Redo deleting a line by removing it again\n         linesRef.current = linesRef.current.filter(\n           (line) => line.id !== lastRedo.line.id\n         );\n       }\n \n-      onUpdateAttributes({\n+      updateAttributes({\n         lines: linesRef.current,\n       });\n     }\n   };\n \n+\n   const deletePath = (pathElement) => {\n     const clickedPathData = pathElement.getAttribute(\"d\");\n     const pathIndex = linesRef.current.findIndex(\n       (line) => line.path === clickedPathData\n"
                },
                {
                    "date": 1732115869650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n         // Undo deleting a line by adding it back\n         linesRef.current = [...linesRef.current, lastAction.line];\n       }\n \n-      updateAttributes({\n+      onUpdateAttributes({\n         lines: linesRef.current,\n       });\n     }\n   };\n@@ -167,15 +167,14 @@\n           (line) => line.id !== lastRedo.line.id\n         );\n       }\n \n-      updateAttributes({\n+      onUpdateAttributes({\n         lines: linesRef.current,\n       });\n     }\n   };\n \n-\n   const deletePath = (pathElement) => {\n     const clickedPathData = pathElement.getAttribute(\"d\");\n     const pathIndex = linesRef.current.findIndex(\n       (line) => line.path === clickedPathData\n"
                },
                {
                    "date": 1732121935549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,12 @@\n   const [color, setColor] = useState(isDarkMode ? \"#FFFFFF\" : \"#000000\");\n   const [size, setSize] = useState(thicknessOptions.thin);\n   const [history, setHistory] = useState([]);\n   const [redoStack, setRedoStack] = useState([]);\n-  const [background, setBackground] = useState(backgroundStyles.none);\n-\n+  const [background, setBackground] = useState(\n+    node.attrs.paperType || backgroundStyles.none\n+  );\n+  \n   const svgRef = useRef(null);\n   const linesRef = useRef(initialLines);\n   const pathsGroupRef = useRef(null);\n   const activePathRef = useRef(null);\n"
                },
                {
                    "date": 1732137370812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,12 +34,10 @@\n   const [color, setColor] = useState(isDarkMode ? \"#FFFFFF\" : \"#000000\");\n   const [size, setSize] = useState(thicknessOptions.thin);\n   const [history, setHistory] = useState([]);\n   const [redoStack, setRedoStack] = useState([]);\n-  const [background, setBackground] = useState(\n-    node.attrs.paperType || backgroundStyles.none\n-  );\n-  \n+  const [background, setBackground] = useState(backgroundStyles.none);\n+\n   const svgRef = useRef(null);\n   const linesRef = useRef(initialLines);\n   const pathsGroupRef = useRef(null);\n   const activePathRef = useRef(null);\n"
                }
            ],
            "date": 1732016836934,
            "name": "Commit-0",
            "content": "import { useState, useRef, useEffect, useMemo } from \"react\";\nimport * as d3 from \"d3\";\nimport { v4 as uuid } from \"uuid\";\n\nexport const thicknessOptions = {\n  thin: 2,\n  medium: 3,\n  thick: 4,\n  thicker: 5,\n  thickest: 6,\n};\n\nexport const backgroundStyles = {\n  none: \"\",\n  grid: \"grid\",\n  ruled: \"ruled\",\n  dotted: \"dotted\",\n};\n\nconst BUFFER_ZONE = 50;\nconst INCREMENT_HEIGHT = 200;\n\nexport const useDrawing = ({ initialHeight = 400, initialLines = [], onUpdateAttributes }) => {\n  const isDarkMode = document.documentElement.classList.contains(\"dark\");\n  const [drawing, setDrawing] = useState(false);\n  const [points, setPoints] = useState([]);\n  const [path, setPath] = useState(\"\");\n  const [svgHeight, setSvgHeight] = useState(initialHeight);\n  const [tool, setTool] = useState(\"pencil\");\n  const [color, setColor] = useState(isDarkMode ? \"#FFFFFF\" : \"#000000\");\n  const [size, setSize] = useState(thicknessOptions.thin);\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const [background, setBackground] = useState(backgroundStyles.none);\n\n  const svgRef = useRef(null);\n  const linesRef = useRef(initialLines);\n  const pathsGroupRef = useRef(null);\n  const activePathRef = useRef(null);\n  const throttleRef = useRef(null);\n  const batchUpdateTimeoutRef = useRef(null);\n\n  const lineGenerator = useMemo(\n    () =>\n      d3\n        .line()\n        .x((d) => d.x)\n        .y((d) => d.y)\n        .curve(d3.curveBasis),\n    []\n  );\n\n  const smoothPoints = (points) => {\n    if (points.length < 3) return points;\n    return points.map((point, i, arr) => {\n      if (i === 0 || i === arr.length - 1) return point;\n      const prev = arr[i - 1];\n      const next = arr[i + 1];\n      return {\n        x: (prev.x + point.x + next.x) / 3,\n        y: (prev.y + point.y + next.y) / 3,\n      };\n    });\n  };\n\n  const batchUpdatePaths = () => {\n    if (batchUpdateTimeoutRef.current) {\n      clearTimeout(batchUpdateTimeoutRef.current);\n    }\n\n    batchUpdateTimeoutRef.current = setTimeout(() => {\n      onUpdateAttributes({\n        lines: linesRef.current,\n      });\n    }, 500);\n  };\n\n  const getPointerCoordinates = (event) => {\n    const svg = svgRef.current;\n    const rect = svg.getBoundingClientRect();\n    const clientX = event.touches ? event.touches[0].clientX : event.clientX;\n    const clientY = event.touches ? event.touches[0].clientY : event.clientY;\n    const scaleX = svg.viewBox.baseVal.width / rect.width;\n    const scaleY = svg.viewBox.baseVal.height / rect.height;\n    return [\n      (clientX - rect.left) * scaleX,\n      (clientY - rect.top) * scaleY,\n    ];\n  };\n\n  const startDrawing = (x, y) => {\n    setDrawing(true);\n    setPoints([{ x, y }]);\n  };\n\n  const draw = (x, y) => {\n    if (!drawing) return;\n\n    const newPoints = [...points, { x, y }];\n    setPoints(newPoints);\n    const newPath = lineGenerator(smoothPoints(newPoints));\n    setPath(newPath);\n\n    if (y > svgHeight - BUFFER_ZONE) {\n      const newHeight = svgHeight + INCREMENT_HEIGHT;\n      setSvgHeight(newHeight);\n      onUpdateAttributes({ height: newHeight });\n    }\n  };\n\n  const stopDrawing = () => {\n    if (drawing) {\n      setDrawing(false);\n      saveDrawing();\n      setHistory((prevHistory) => [\n        ...prevHistory,\n        { action: \"add\", line: { id: uuid(), path, color, size, tool } },\n      ]);\n      setPath(\"\");\n      setPoints([]);\n    }\n  };\n\n  const saveDrawing = () => {\n    if (!path) return;\n\n    const newLine = { id: uuid(), path, color, size, tool };\n    linesRef.current = [...linesRef.current, newLine];\n    batchUpdatePaths();\n  };\n\n  const undo = () => {\n    if (history.length > 0) {\n      const lastAction = history[history.length - 1];\n      setHistory((prevHistory) => prevHistory.slice(0, -1));\n      setRedoStack((prevStack) => [...prevStack, lastAction]);\n\n      if (lastAction.action === \"add\") {\n        linesRef.current = linesRef.current.filter(\n          (line) => line.id !== lastAction.line.id\n        );\n      } else if (lastAction.action === \"delete\") {\n        linesRef.current = [...linesRef.current, lastAction.line];\n      }\n\n      onUpdateAttributes({\n        lines: linesRef.current,\n      });\n    }\n  };\n\n  const redo = () => {\n    if (redoStack.length > 0) {\n      const lastRedo = redoStack[redoStack.length - 1];\n      setRedoStack((prevStack) => prevStack.slice(0, -1));\n      setHistory((prevHistory) => [...prevHistory, lastRedo]);\n\n      if (lastRedo.action === \"add\") {\n        linesRef.current = [...linesRef.current, lastRedo.line];\n      } else if (lastRedo.action === \"delete\") {\n        linesRef.current = linesRef.current.filter(\n          (line) => line.id !== lastRedo.line.id\n        );\n      }\n\n      onUpdateAttributes({\n        lines: linesRef.current,\n      });\n    }\n  };\n\n  const deletePath = (pathElement) => {\n    const clickedPathData = pathElement.getAttribute(\"d\");\n    const pathIndex = linesRef.current.findIndex(\n      (line) => line.path === clickedPathData\n    );\n\n    if (pathIndex !== -1) {\n      const removedLine = linesRef.current[pathIndex];\n      setHistory((prevHistory) => [\n        ...prevHistory,\n        { action: \"delete\", line: removedLine },\n      ]);\n      linesRef.current.splice(pathIndex, 1);\n      onUpdateAttributes({\n        lines: linesRef.current,\n      });\n    }\n  };\n\n  const adjustColorForMode = (color) => {\n    if (isDarkMode) {\n      return color === \"#000000\" ? \"#FFFFFF\" : color;\n    } else {\n      return color === \"#FFFFFF\" ? \"#000000\" : color;\n    }\n  };\n\n  return {\n    drawing,\n    points,\n    path,\n    svgHeight,\n    tool,\n    color,\n    size,\n    background,\n    history,\n    redoStack,\n    svgRef,\n    linesRef,\n    pathsGroupRef,\n    activePathRef,\n    setTool,\n    setColor,\n    setSize,\n    setBackground,\n    startDrawing,\n    draw,\n    stopDrawing,\n    undo,\n    redo,\n    deletePath,\n    getPointerCoordinates,\n    adjustColorForMode,\n  };\n};"
        }
    ]
}